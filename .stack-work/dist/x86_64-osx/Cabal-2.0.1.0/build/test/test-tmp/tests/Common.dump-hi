
==================== FINAL INTERFACE ====================
2018-03-08 20:29:33.253515 UTC

interface main:Common 8022
  interface hash: 025bac1a0c41c78c9c69324c8938fbc6
  ABI hash: 5c5ea0174079edc36abf768dcaed18bf
  export-list hash: d1f2025e62cc84cce8f71d2619768ec9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 327d57f7615573166a1d53896c3b71f5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Common.anfRun
  Common.anfTest
  Common.check
  Common.createTestTree
  Common.dirExt
  Common.dynamicError
  Common.exec
  Common.generateSource
  Common.getTotal
  Common.initScore
  Common.matchError
  Common.mkTest
  Common.mkTest'
  Common.overflowError
  Common.parseTestFile
  Common.rLines
  Common.readResult
  Common.run
  Common.scoreTest'
  Common.staticError
  Common.timeLimit
  Common.updateCurrent
  Common.updateTotal
  Common.Program'{Common.Code Common.File}
  Common.Result
  Common.Score
  Common.Test{Common.Test testAnf testCode testName testResult}
  Common.TestResult{Common.Failure Common.Value}
module dependencies:
package dependencies: aeson-1.2.3.0 ansi-terminal-0.7.1.1
                      ansi-wl-pprint-0.6.8.1 array-0.5.2.0 async-2.1.1.1
                      attoparsec-0.13.2.0 base-4.10.1.0 base-compat-0.9.3 binary-0.8.5.1
                      bytestring-0.10.8.2 case-insensitive-1.2.0.10 clock-0.7.2
                      cmdargs-0.10.18 colour-2.3.4 containers-0.5.10.2 deepseq-1.4.3.0
                      directory-1.3.0.2 dlist-0.8.0.3 egg-0.1.0.0 filepath-1.4.1.2
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 hashable-1.2.6.1
                      integer-gmp-1.0.1.0 integer-logarithms-1.0.2 megaparsec-6.3.0
                      mtl-2.2.1 optparse-applicative-0.14.0.0 parsec-3.1.11
                      parser-combinators-0.2.1 primitive-0.6.2.0 process-1.6.1.0
                      random-1.1 regex-base-0.93.2 regex-tdfa-1.2.2 scientific-0.3.5.2
                      stm-2.4.4.1 tagged-0.8.5 tasty-0.11.3 tasty-hunit-0.9.2
                      template-haskell-2.12.0.0 text-1.2.2.2 time-1.8.0.2
                      time-locale-compat-0.1.1.3 transformers-0.5.2.0
                      unbounded-delays-0.1.1.0 unix-2.7.2.2 unordered-containers-0.2.8.0
                      uuid-types-1.0.3 vector-0.12.0.1
orphans: stm-2.4.4.1:Control.Monad.STM
         regex-tdfa-1.2.2:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.2:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.2:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.2:Text.Regex.TDFA.String
         regex-base-0.93.2:Text.Regex.Base.Context colour-2.3.4:Data.Colour
         egg-0.1.0.0:Language.Egg.Types
         attoparsec-0.13.2.0:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.0:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         hashable-1.2.6.1:Data.Hashable.Generic text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: aeson-1.2.3.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.0:Data.Attoparsec.Internal.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats clock-0.7.2:System.Clock
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         dlist-0.8.0.3:Data.DList ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         megaparsec-6.3.0:Text.Megaparsec
                         megaparsec-6.3.0:Text.Megaparsec.Error
                         megaparsec-6.3.0:Text.Megaparsec.Pos
                         megaparsec-6.3.0:Text.Megaparsec.Stream
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array tagged-0.8.5:Data.Tagged
                         tasty-0.11.3:Test.Tasty.Core
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         unordered-containers-0.2.8.0:Data.HashMap.Base
                         unordered-containers-0.2.8.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.2.3.0:Data.Aeson 062757518ab8e0c98f084d17a82080d6
import  -/  aeson-1.2.3.0:Data.Aeson.Types 9816cf3a009a0b58d27bcde2704fdde5
import  -/  aeson-1.2.3.0:Data.Aeson.Types.FromJSON 768c925b407eb297b0b95e7aae2e8e05
import  -/  aeson-1.2.3.0:Data.Aeson.Types.Internal 275b437aab44432879bddbc3dde0b86c
import  -/  base-4.10.1.0:Control.Exception c134ea327d158f2eebf26e12a1d4ad47
import  -/  base-4.10.1.0:Data.Char fe4e3458190deeac19969ce15e33bed9
import  -/  base-4.10.1.0:Data.Either d7dae5d9bf298dee616e465c14b5d60e
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.IORef 27e590a10ae158b4075a28a9902178b2
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:Debug.Trace d6b92a67d41f66511d3d35c0713fec79
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.IO e261d8b68ccf81a359626fa520b57d1d
import  -/  base-4.10.1.0:GHC.IO.Exception c72758923693d771268bed5d3d52443d
import  -/  base-4.10.1.0:GHC.IORef fcf9a9efa120217c33e71b5dc4a08e1f
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:GHC.Unicode 49c9de4fffed0d9be65aaeb6a60b757c
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.Exit dfc0230e6f69e5284631635d15ff33dc
import  -/  base-4.10.1.0:System.IO 525805ab19df5e4fe6d8de7dde9cb909
import  -/  base-4.10.1.0:Text.Printf 3260e305614fadf610f6d8134e12b571
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 407de9fed3a4d09c2dba0f60d6b87c94
import  -/  egg-0.1.0.0:Language.Egg.Normalizer 10772f8b616e508d5df896cd4cb720d2
import  -/  egg-0.1.0.0:Language.Egg.Parser 11fa3fd6cb5e6050c15c1bf08b26c253
import  -/  egg-0.1.0.0:Language.Egg.Types 26a05ab3461a0d348a47d2147d423df2
import  -/  egg-0.1.0.0:Language.Egg.UX c097e9ae7ef71bf8bb0d0528f126846e
import  -/  egg-0.1.0.0:Language.Egg.Utils 177642ae9ff45b7a97313efc9643b064
import  -/  filepath-1.4.1.2:System.FilePath 3751e022be1498b82ed80e7d6465cd1a
import  -/  filepath-1.4.1.2:System.FilePath.Posix e53ce4f7e12552941b411aaefd9d2247
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  tasty-0.11.3:Test.Tasty aa483977a309b5a7bd7996f36e67f882
import  -/  tasty-0.11.3:Test.Tasty.Core 5aa4f9ea3dc99f3dae772bacfa6b350e
import  -/  tasty-hunit-0.9.2:Test.Tasty.HUnit 4a75e066d60a7d2415929cf970f5f156
import  -/  tasty-hunit-0.9.2:Test.Tasty.HUnit.Orig cabfe6febc3dd1bdd12e76f191fca3cf
import  -/  text-1.2.2.2:Data.Text 46ca7d28fac0ab4cb2dcee3eff5b0074
import  -/  text-1.2.2.2:Data.Text.Show 634fe9da73de399c979e66d81c8736fe
import  -/  unordered-containers-0.2.8.0:Data.HashMap.Base 469883498de4a1e18f9cbf23ad5ea465
import  -/  unordered-containers-0.2.8.0:Data.HashMap.Lazy 9df8f3a5e8e442912337e1e2cca09533
2531359310bd9e87cadaa0019c3a6a48
  $fFromJSONProgram' ::
    Data.Aeson.Types.FromJSON.FromJSON Common.Program'
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Common.Program'
                  Common.$fFromJSONProgram'_$cparseJSON
                  Common.$fFromJSONProgram'_$cparseJSONList -}
ed346bd8cee59ba554351258394f8246
  $fFromJSONProgram'1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
53f727e4ba9eaa04fe968fa7a1570137
  $fFromJSONProgram'2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
28876fdf5518e76793b7d5fba9e86205
  $fFromJSONProgram'3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
2531359310bd9e87cadaa0019c3a6a48
  $fFromJSONProgram'4 ::
    Data.Text.Internal.Text
    -> Data.Aeson.Types.Internal.Parser Common.Program'
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ (x :: Data.Text.Internal.Text) ->
                 let {
                   a1 :: Common.Program'
                   = case x of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                     let {
                       end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                     } in
                     letrec {
                       $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                         {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                       = \ (ww :: GHC.Prim.Int#) ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww end) of wild1 {
                           GHC.Types.False
                           -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.geWord# r# 55296##) of wild2 {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                     ($wunfold (GHC.Prim.+# ww 1#))
                                GHC.Types.True
                                -> case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.leWord# r# 56319##) of wild3 {
                                     GHC.Types.False
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                          ($wunfold (GHC.Prim.+# ww 1#))
                                     GHC.Types.True
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (case GHC.Prim.indexWord16Array#
                                                  dt
                                                  (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                           GHC.Types.C#
                                             (GHC.Prim.chr#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.+#
                                                      (GHC.Prim.uncheckedIShiftL#
                                                         (GHC.Prim.-#
                                                            (GHC.Prim.word2Int# r#)
                                                            55296#)
                                                         10#)
                                                      (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                                   65536#)) })
                                          ($wunfold (GHC.Prim.+# ww 2#)) } } }
                           GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                     } in
                     let {
                       s :: [GHC.Types.Char] = $wunfold dt1
                     } in
                     case GHC.Base.eqString s Common.$fFromJSONProgram'5 of wild1 {
                       GHC.Types.False -> Common.Code s GHC.Types.True -> Common.File } }
                 } in
                 (\ @ f4 :: * -> *
                    @ r
                    (_path :: Data.Aeson.Types.Internal.JSONPath)
                    (_kf :: Data.Aeson.Types.Internal.Failure f4 r)
                    (ks :: Data.Aeson.Types.Internal.Success Common.Program' f4 r) ->
                  ks a1)
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <Common.Program'>_R))) -}
898b2f9c9cce2abe710cef2ed12dd85f
  $fFromJSONProgram'5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Common.$fFromJSONProgram'6) -}
ed08ea4e8b08cc8318f7e922c97ced89
  $fFromJSONProgram'6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("file"#) -}
11ce361d5d497aac6d55fb508191f74e
  $fFromJSONProgram'7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Common.$fFromJSONProgram'8) -}
912358a670ecb515fc5b0a30b8cbeb34
  $fFromJSONProgram'8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\"file\" or String"#) -}
2531359310bd9e87cadaa0019c3a6a48
  $fFromJSONProgram'_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Common.Program'
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.FromJSON.withText
                   @ Common.Program'
                   Common.$fFromJSONProgram'7
                   Common.$fFromJSONProgram'4) -}
2531359310bd9e87cadaa0019c3a6a48
  $fFromJSONProgram'_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser [Common.Program']
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg3 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Common.$fFromJSONProgram'3
                            (GHC.CString.unpackAppendCString#
                               Common.$fFromJSONProgram'2
                               (GHC.CString.unpackAppendCString#
                                  Common.$fFromJSONProgram'1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Common.Program'] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg3)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0] <[Common.Program']>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# ww dt1) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            GHC.Types.True -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Common.$fFromJSONProgram'_go 0# ($wgo 0#) } }) -}
2531359310bd9e87cadaa0019c3a6a48
  $fFromJSONProgram'_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser [Common.Program']
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
2d40c3654119601e9c428d167e8762a8
  $fFromJSONTest :: Data.Aeson.Types.FromJSON.FromJSON Common.Test
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Common.Test
                  Common.$fFromJSONTest_$cparseJSON
                  Common.$fFromJSONTest_$cparseJSONList -}
07b0562f5f0c2a098674f4c786dfbe5a
  $fFromJSONTest1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("{ \"name\" : ..., \"code\" : ..., \"result\" : ..., \"anf\" : \"False\"}"#) -}
fd65d42a6e7b4c47a69dc7c837618931
  $fFromJSONTestResult ::
    Data.Aeson.Types.FromJSON.FromJSON Common.TestResult
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Common.TestResult
                  Common.$fFromJSONTestResult_$cparseJSON
                  Common.$fFromJSONTestResult_$cparseJSONList -}
fd65d42a6e7b4c47a69dc7c837618931
  $fFromJSONTestResult1 ::
    Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser Common.TestResult
  {- Arity: 1, Strictness: <S,U> -}
bd0cb7c58c8acf706e783cc963e0ddb3
  $fFromJSONTestResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("{ \"value\": String } or { \"failure\" : String }"#) -}
fd65d42a6e7b4c47a69dc7c837618931
  $fFromJSONTestResult_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Common.TestResult
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.FromJSON.withObject
                   @ Common.TestResult
                   Common.$fFromJSONTestResult_expected
                   Common.$fFromJSONTestResult1) -}
fd65d42a6e7b4c47a69dc7c837618931
  $fFromJSONTestResult_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser [Common.TestResult]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg3 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Common.$fFromJSONProgram'3
                            (GHC.CString.unpackAppendCString#
                               Common.$fFromJSONProgram'2
                               (GHC.CString.unpackAppendCString#
                                  Common.$fFromJSONProgram'1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Common.TestResult] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg3)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Common.TestResult]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# ww dt1) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            GHC.Types.True -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Common.$fFromJSONTestResult_go 0# ($wgo 0#) } }) -}
f5d8da3516a794f8a1a65826c362256f
  $fFromJSONTestResult_expected :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Common.$fFromJSONTestResult2) -}
fd65d42a6e7b4c47a69dc7c837618931
  $fFromJSONTestResult_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser [Common.TestResult]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
2d40c3654119601e9c428d167e8762a8
  $fFromJSONTest_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Common.Test
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.FromJSON.withObject
                   @ Common.Test
                   Common.$fFromJSONTest_expected
                   Common.$fFromJSONTest_p) -}
2d40c3654119601e9c428d167e8762a8
  $fFromJSONTest_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser [Common.Test]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg3 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Common.$fFromJSONProgram'3
                            (GHC.CString.unpackAppendCString#
                               Common.$fFromJSONProgram'2
                               (GHC.CString.unpackAppendCString#
                                  Common.$fFromJSONProgram'1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success [Common.Test] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg3)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0] <[Common.Test]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# ww dt1) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            GHC.Types.True -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Common.$fFromJSONTest_go 0# ($wgo 0#) } }) -}
67f00d8c5b52596acc442db07caa3864
  $fFromJSONTest_expected :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Common.$fFromJSONTest1) -}
2d40c3654119601e9c428d167e8762a8
  $fFromJSONTest_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser [Common.Test]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
2d40c3654119601e9c428d167e8762a8
  $fFromJSONTest_p ::
    Data.HashMap.Base.HashMap
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Common.Test
  {- Arity: 1, Strictness: <S,U> -}
2531359310bd9e87cadaa0019c3a6a48
  $fShowProgram' :: GHC.Show.Show Common.Program'
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Common.Program'
                  Common.$fShowProgram'_$cshowsPrec
                  Common.$fShowProgram'_$cshow
                  Common.$fShowProgram'_$cshowList -}
2531359310bd9e87cadaa0019c3a6a48
  $fShowProgram'1 :: Common.Program' -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Common.$fShowProgram'_$cshowsPrec
                   Common.$fShowProgram'2) -}
c909921fad675f9ec67e13cd71f1bb01
  $fShowProgram'2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
98f08765bd093499d2d413f85754a683
  $fShowProgram'3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Code "#) -}
b8558eaad2d2449fed659b92c9942706
  $fShowProgram'4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Common.$fShowProgram'5) -}
20f33fe4b19bf696729fb12f3554cf41
  $fShowProgram'5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("File"#) -}
2a61f63bce88ed1710e048233bd9ec63
  $fShowProgram'6 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2531359310bd9e87cadaa0019c3a6a48
  $fShowProgram'_$cshow :: Common.Program' -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Common.Program') ->
                 case x of wild {
                   Common.File -> Common.$fShowProgram'4
                   Common.Code b1
                   -> GHC.CString.unpackAppendCString#
                        Common.$fShowProgram'3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Common.$fShowProgram'6)) }) -}
2531359310bd9e87cadaa0019c3a6a48
  $fShowProgram'_$cshowList :: [Common.Program'] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Common.Program'
                   Common.$fShowProgram'1) -}
2531359310bd9e87cadaa0019c3a6a48
  $fShowProgram'_$cshowsPrec ::
    GHC.Types.Int -> Common.Program' -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Common.Program')
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Common.File
                   -> GHC.Base.++ @ GHC.Types.Char Common.$fShowProgram'4 eta
                   Common.Code b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.CString.unpackAppendCString#
                             Common.$fShowProgram'3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Common.$fShowProgram'3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            eta))))) } } }) -}
2d40c3654119601e9c428d167e8762a8
  $fShowTest :: GHC.Show.Show Common.Test
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Common.Test
                  Common.$fShowTest_$cshowsPrec
                  Common.$fShowTest_$cshow
                  Common.$fShowTest_$cshowList -}
2d40c3654119601e9c428d167e8762a8
  $fShowTest1 :: Common.Test -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U,1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Common.Test) (w1 :: GHC.Base.String) ->
                 case w of ww { Common.Test ww1 ww2 ww3 ww4 ->
                 Common.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 w1 }) -}
3c13e069fcabcdd736acca627347c719
  $fShowTest10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test {"#) -}
ce649557f642714eb787327c8bebc8d0
  $fShowTest2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Common.$fShowTest3) -}
043e0224486a5915f5ad13e263bb5f01
  $fShowTest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
2f023f001f64ecc176dd0c7d4e3d3340
  $fShowTest4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("testAnf = "#) -}
a027708266f3b72444d722476d5ed20c
  $fShowTest5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Failure "#) -}
9ca14930168f132aadf4a4cb489813cd
  $fShowTest6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Value "#) -}
70aa834b47df814abaa7f41c7f3f58b3
  $fShowTest7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("testResult = "#) -}
410414bd6fa0d0215c477fb059efd891
  $fShowTest8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("testCode = "#) -}
7dab2d792b88f42936bb9b5df37563be
  $fShowTest9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("testName = "#) -}
fd65d42a6e7b4c47a69dc7c837618931
  $fShowTestResult :: GHC.Show.Show Common.TestResult
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Common.TestResult
                  Common.$fShowTestResult_$cshowsPrec
                  Common.$fShowTestResult_$cshow
                  Common.$fShowTestResult_$cshowList -}
fd65d42a6e7b4c47a69dc7c837618931
  $fShowTestResult1 :: Common.TestResult -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Common.TestResult) (w1 :: GHC.Base.String) ->
                 Common.$w$cshowsPrec1 0# w w1) -}
fd65d42a6e7b4c47a69dc7c837618931
  $fShowTestResult_$cshow :: Common.TestResult -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Common.TestResult) ->
                 case x of wild {
                   Common.Value b1
                   -> GHC.CString.unpackAppendCString#
                        Common.$fShowTest6
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Common.$fShowProgram'6))
                   Common.Failure b1
                   -> GHC.CString.unpackAppendCString#
                        Common.$fShowTest5
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Common.$fShowProgram'6)) }) -}
fd65d42a6e7b4c47a69dc7c837618931
  $fShowTestResult_$cshowList ::
    [Common.TestResult] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Common.TestResult
                   Common.$fShowTestResult1) -}
fd65d42a6e7b4c47a69dc7c837618931
  $fShowTestResult_$cshowsPrec ::
    GHC.Types.Int -> Common.TestResult -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Common.TestResult)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Common.$w$cshowsPrec1 ww1 w1 w2 }) -}
2d40c3654119601e9c428d167e8762a8
  $fShowTest_$cshow :: Common.Test -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Common.Test) ->
                 Common.$fShowTest_$cshowsPrec
                   Common.$fShowProgram'2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2d40c3654119601e9c428d167e8762a8
  $fShowTest_$cshowList :: [Common.Test] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Common.Test
                   Common.$fShowTest1) -}
2d40c3654119601e9c428d167e8762a8
  $fShowTest_$cshowsPrec ::
    GHC.Types.Int -> Common.Test -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Common.Test)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Common.Test ww3 ww4 ww5 ww6 ->
                 Common.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 w2 } }) -}
14ef3c8889c5bdbeb166198a7224e2fe
  $s^1 :: GHC.Types.Int
  {- Strictness: x -}
35dc3a581def1d26337b7d45cdd81692
  $s^2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
093c1e331e67ca84a065bfb3b92cb36b
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
54f04e419bd4c03225586a30b44e9af7
  $tc'Code :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   191170394943614057##
                   17145716765986229504##
                   Common.$trModule
                   Common.$tc'Code2
                   0#
                   Common.$tc'Code1) -}
54ddc5cd53a8afdc6f150e4466ed98fe
  $tc'Code1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b8b3e56423ae64a2dceb1f4026fcf21b
  $tc'Code2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Common.$tc'Code3) -}
ddd7295e79604886091be40dac7e1e2f
  $tc'Code3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Code"#) -}
1224e397c7b96bb49f1e68a3c5c03be9
  $tc'Failure :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15427587612787835762##
                   14403706360875169131##
                   Common.$trModule
                   Common.$tc'Failure2
                   0#
                   Common.$tc'Failure1) -}
d9688169fa6405e4b99169b5eb6d3267
  $tc'Failure1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7274fa77d13827d243183310f4e7551d
  $tc'Failure2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Common.$tc'Failure3) -}
bc410fd60a669f283a0561a71a8a0c89
  $tc'Failure3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Failure"#) -}
2a088273cf9bd6538d41e605492dc285
  $tc'File :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10990771538005704334##
                   17994809434648060989##
                   Common.$trModule
                   Common.$tc'File2
                   0#
                   Common.$tc'File1) -}
e627248b68089f8c5721d8279e3c623d
  $tc'File1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
1051661a36636fd4213fa9fca6971a34
  $tc'File2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Common.$tc'File3) -}
eb5f925c8dc3c2f9ed2c2a28a02cac6f
  $tc'File3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'File"#) -}
2f4af3c03dfe5bb72a5332cf356499dd
  $tc'Test :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1097883533576424937##
                   7219699244709051714##
                   Common.$trModule
                   Common.$tc'Test2
                   0#
                   Common.$tc'Test1) -}
a7bdd04d9e986e21f99d6abbfa8683f0
  $tc'Test1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ece1d5ab4f7249d329452ee898fac210
  $tc'Test2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Common.$tc'Test3) -}
bdfc85b40d9f817537c864caf070de68
  $tc'Test3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Test"#) -}
43f2edbadd16a4445cbee15a105dfbb2
  $tc'Value :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1129884059199162731##
                   17221578435093255869##
                   Common.$trModule
                   Common.$tc'Value1
                   0#
                   Common.$tc'Failure1) -}
60a8a6f7c79e17209db4a178f7775d4c
  $tc'Value1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Common.$tc'Value2) -}
d8226297ef7432da4fb092be25a1e48f
  $tc'Value2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Value"#) -}
4f6b55b4e771cb4f465f7417a80cbc7a
  $tcProgram' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15289702132105503496##
                   10098767398555036081##
                   Common.$trModule
                   Common.$tcProgram'1
                   0#
                   GHC.Types.krep$*) -}
1d134b76d9b1ff39c842d8a9da71a89f
  $tcProgram'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Common.$tcProgram'2) -}
d55f072c34cfa39814b6c42d7680e412
  $tcProgram'2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Program'"#) -}
bafbf94b79b5d9480f1b92a8a97d3a0d
  $tcTest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10627870192190391963##
                   2395758977337936353##
                   Common.$trModule
                   Common.$tcTest1
                   0#
                   GHC.Types.krep$*) -}
c37c24ea973b35a3c029325d8b5c49c0
  $tcTest1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Common.$tcTest2) -}
b87d67d54eef47be14be2880b2db8939
  $tcTest2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test"#) -}
7b4d809bb302ccf63d09be5c0232e074
  $tcTestResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3171002027341444814##
                   8005916052875895551##
                   Common.$trModule
                   Common.$tcTestResult1
                   0#
                   GHC.Types.krep$*) -}
cef535bd370c784fa201917efa013d13
  $tcTestResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Common.$tcTestResult2) -}
916ac413b44ff6403cc5b8d497192206
  $tcTestResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TestResult"#) -}
3c0b8593534136fd99113fb68bcbad71
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Common.$trModule3
                   Common.$trModule1) -}
b04e0a09406ec104d8b61b389eab3e4f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Common.$trModule2) -}
79f94f4ef99562600e6d2e5f8e26e74c
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Common"#) -}
23ea0f68f99a9c42dde3e9b59155a5db
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Common.$trModule4) -}
1f2b1ed635036f18945e10de27d34c9c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
448898ce82769276550447270238fe81
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> Common.Program'
    -> Common.TestResult
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 6, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: Common.Program')
                   (ww3 :: Common.TestResult)
                   (ww4 :: GHC.Types.Bool)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Common.$fShowTest10
                       (GHC.CString.unpackAppendCString#
                          Common.$fShowTest9
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)3
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      GHC.Show.showCommaSpace1
                                      (GHC.CString.unpackAppendCString#
                                         Common.$fShowTest8
                                         (Common.$fShowProgram'_$cshowsPrec
                                            Common.$fShowProgram'2
                                            ww2
                                            (GHC.Base.++
                                               @ GHC.Types.Char
                                               GHC.Show.showCommaSpace1
                                               (GHC.CString.unpackAppendCString#
                                                  Common.$fShowTest7
                                                  (Common.$w$cshowsPrec1
                                                     0#
                                                     ww3
                                                     (GHC.Base.++
                                                        @ GHC.Types.Char
                                                        GHC.Show.showCommaSpace1
                                                        (GHC.CString.unpackAppendCString#
                                                           Common.$fShowTest4
                                                           (case ww4 of wild {
                                                              GHC.Types.False
                                                              -> GHC.Base.++
                                                                   @ GHC.Types.Char
                                                                   GHC.Show.$fShowBool3
                                                                   (GHC.Base.++
                                                                      @ GHC.Types.Char
                                                                      Common.$fShowTest2
                                                                      x)
                                                              GHC.Types.True
                                                              -> GHC.Base.++
                                                                   @ GHC.Types.Char
                                                                   GHC.Show.$fShowBool1
                                                                   (GHC.Base.++
                                                                      @ GHC.Types.Char
                                                                      Common.$fShowTest2
                                                                      x) })))))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
fd65d42a6e7b4c47a69dc7c837618931
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Common.TestResult -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Common.TestResult)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Common.Value b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.CString.unpackAppendCString#
                             Common.$fShowTest6
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Common.$fShowTest6
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))))) }
                   Common.Failure b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.CString.unpackAppendCString#
                             Common.$fShowTest5
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Common.$fShowTest5
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1))))) } }) -}
f475aefe7343c39339d9c8f37a9925f7
  $w$s^ :: GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        w1
                        Common.$s^2 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.eqInteger#
                             w1
                             Common.$s^2 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False
                        -> case w of ww { GHC.Types.I# ww1 -> Common.$wf ww1 w1 }
                        GHC.Types.True -> 1# } }
                   GHC.Types.True
                   -> case Common.$s^1 ret_ty GHC.Prim.Int# of {} } }) -}
2c93c10cc0b5e022c8ddc4dea042ca96
  $wanfRun :: Language.Egg.UX.Text -> (# Language.Egg.UX.Text #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Language.Egg.UX.Text) ->
                 (# case Language.Egg.Parser.parse
                           (GHC.Types.[] @ GHC.Types.Char)
                           w of ww { Language.Egg.Types.Prog ww1 ww2 ->
                    case Language.Egg.Normalizer.$wanf
                           @ Language.Egg.UX.SourceSpan
                           Language.Egg.Normalizer.anormal2
                           ww2 of ww3 { (#,#) ww4 ww5 ->
                    case ww5 of dt { DEFAULT ->
                    Language.Egg.Types.$w$cpprint1
                      @ Language.Egg.UX.SourceSpan
                      (GHC.Base.map
                         @ (Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                         @ (Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                         (Language.Egg.Normalizer.anormal1 @ Language.Egg.UX.SourceSpan)
                         ww1)
                      dt } } } #)) -}
f98eeb3b6ba4c54db35c44d5c332a46b
  $wcreateTestTree ::
    Common.Score
    -> GHC.Base.String
    -> Common.Program'
    -> Common.TestResult
    -> GHC.Types.Bool
    -> Test.Tasty.Core.TestTree
  {- Arity: 5, Strictness: <L,U(U)><L,U><L,U><L,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: Common.Score)
                   (ww :: GHC.Base.String)
                   (ww1 :: Common.Program')
                   (ww2 :: Common.TestResult)
                   (ww3 :: GHC.Types.Bool) ->
                 case ww3 of wild {
                   GHC.Types.False
                   -> Common.mkTest
                        w
                        ww
                        ww1
                        (case ww2 of wild1 {
                           Common.Value s
                           -> Data.Either.Right @ GHC.Base.String @ GHC.Base.String s
                           Common.Failure s
                           -> Data.Either.Left @ GHC.Base.String @ GHC.Base.String s })
                   GHC.Types.True
                   -> Common.anfTest
                        w
                        ww
                        ww1
                        (case ww2 of wild1 {
                           Common.Value s
                           -> Data.Either.Right @ GHC.Base.String @ GHC.Base.String s
                           Common.Failure s
                           -> Data.Either.Left @ GHC.Base.String @ GHC.Base.String s }) }) -}
03a5876fb8afa59cd7f84cbd17df8242
  $wf :: GHC.Prim.Int# -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
8213f6ea74d51c35e082ba934472f299
  $wscoreTest' ::
    GHC.Classes.Eq b =>
    Common.Score
    -> (a -> b)
    -> a
    -> b
    -> GHC.Types.Int
    -> GHC.Base.String
    -> Test.Tasty.Core.TestTree
  {- Arity: 7,
     Strictness: <L,U(C(C1(U)),A)><L,U(U)><L,C(U)><L,U><L,U><L,U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ @ b
                   @ a
                   (w :: GHC.Classes.Eq b)
                   (w1 :: Common.Score)
                   (ww :: a -> b)
                   (ww1 :: a)
                   (ww2 :: b)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: GHC.Base.String) ->
                 Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   ww4
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case w1
                           `cast`
                         (Nth:2
                              (Trans
                                   (<GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)>_R
                                    ->_R GHC.Types.N:IO[0] <(GHC.Types.Int, GHC.Types.Int)>_R)
                                   (GHC.IORef.N:IORef[0] <(GHC.Types.Int, GHC.Types.Int)>_N
                                    ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                (GHC.Types.Int,
                                                 GHC.Types.Int) #)>_R))) of wild { GHC.STRef.STRef var# ->
                    case GHC.Prim.readMutVar#
                           @ GHC.Prim.RealWorld
                           @ (GHC.Types.Int, GHC.Types.Int)
                           var#
                           s of ds1 { (#,#) ipv ipv1 ->
                    case GHC.Prim.writeMutVar#
                           @ GHC.Prim.RealWorld
                           @ (GHC.Types.Int, GHC.Types.Int)
                           var#
                           (case ipv1 of wild1 { (,) x y -> (x, GHC.Num.$fNumInt_$c+ y ww3) })
                           ipv of s2# { DEFAULT ->
                    case GHC.Classes.== @ b w (ww ww1) ww2 of wild1 {
                      GHC.Types.False
                      -> case Common.scoreTest'1 s2#
                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                         of {}
                      GHC.Types.True
                      -> case GHC.Prim.readMutVar#
                                @ GHC.Prim.RealWorld
                                @ (GHC.Types.Int, GHC.Types.Int)
                                var#
                                s2# of ds2 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.writeMutVar#
                                @ GHC.Prim.RealWorld
                                @ (GHC.Types.Int, GHC.Types.Int)
                                var#
                                (case ipv3 of wild2 { (,) x y -> (GHC.Num.$fNumInt_$c+ x ww3, y) })
                                ipv2 of s2#1 { DEFAULT ->
                         (# s2#1, GHC.Types.[] @ GHC.Types.Char #) } } } } } })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
2531359310bd9e87cadaa0019c3a6a48
  data Program' = File | Code Language.Egg.UX.Text
52ea805efeea7977a07af9876f8e0ab7
  type Result =
    Data.Either.Either Language.Egg.UX.Text Language.Egg.UX.Text
e023f7b13eadcab26c9727deb1ecdbf6
  type Score = GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)
2d40c3654119601e9c428d167e8762a8
  data Test
    = Test {testName :: GHC.Base.String,
            testCode :: Common.Program',
            testResult :: Common.TestResult,
            testAnf :: GHC.Types.Bool}
fd65d42a6e7b4c47a69dc7c837618931
  data TestResult = Value GHC.Base.String | Failure GHC.Base.String
22bf1ef0957a963859210b0ea12ef2b6
  anfRun :: Language.Egg.UX.Text -> Common.Result
  {- Arity: 1, Strictness: <L,U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Egg.UX.Text) ->
                 case Common.$wanfRun w of ww { Unit# ww1 ->
                 Data.Either.Right
                   @ Language.Egg.UX.Text
                   @ Language.Egg.UX.Text
                   ww1 }) -}
e1c0272f19e68b16d68fb7bb17abe718
  anfTest ::
    Common.Score
    -> GHC.Base.String
    -> Common.Program'
    -> Common.Result
    -> Test.Tasty.Core.TestTree
  {- Arity: 4, Strictness: <L,U(U)><L,U><S,1*U><L,U> -}
420b27b137fff3217fe7fce01a0d87e5
  check ::
    Common.Score
    -> GHC.Types.Int
    -> Data.Either.Either [GHC.Types.Char] GHC.Base.String
    -> Data.Either.Either [GHC.Types.Char] GHC.Base.String
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <L,1*U(U)><L,1*U(U)><S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Common.check1
                  `cast`
                (<Common.Score>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.Either.Either [GHC.Types.Char] GHC.Base.String>_R
                 ->_R <Data.Either.Either [GHC.Types.Char] GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d2c2d8ec6110764fb79051a003601ada
  check1 ::
    Common.Score
    -> GHC.Types.Int
    -> Data.Either.Either [GHC.Types.Char] GHC.Base.String
    -> Data.Either.Either [GHC.Types.Char] GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,1*U(U)><L,1*U(U)><S,1*U><S,1*U><S,U>,
     Unfolding: (\ (sc :: Common.Score)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Either.Either [GHC.Types.Char] GHC.Base.String)
                   (ds1 :: Data.Either.Either [GHC.Types.Char] GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of wild {
                   Data.Either.Left resE
                   -> case ds1 of wild1 {
                        Data.Either.Left expectE
                        -> case Common.matchError expectE resE of wild2 {
                             GHC.Types.False -> Common.check7 eta
                             GHC.Types.True -> Common.check6 sc n eta }
                        Data.Either.Right expectV
                        -> let {
                             expected :: [GHC.Types.Char]
                             = GHC.CString.unpackAppendCString# Common.$fShowTest6 expectV
                           } in
                           let {
                             actual :: [GHC.Types.Char]
                             = GHC.CString.unpackAppendCString# Common.check5 resE
                           } in
                           case GHC.Base.eqString actual expected of wild2 {
                             GHC.Types.False -> Common.check4 expected actual eta
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } }
                   Data.Either.Right resV
                   -> case ds1 of wild1 {
                        Data.Either.Left expectE
                        -> let {
                             expected :: [GHC.Types.Char]
                             = GHC.CString.unpackAppendCString# Common.check5 expectE
                           } in
                           let {
                             actual :: [GHC.Types.Char]
                             = GHC.CString.unpackAppendCString# Common.$fShowTest6 resV
                           } in
                           case GHC.Base.eqString actual expected of wild2 {
                             GHC.Types.False -> Common.check3 expected actual eta
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) }
                        Data.Either.Right expectV
                        -> case GHC.Base.eqString
                                  (Language.Egg.Utils.trim expectV)
                                  (Language.Egg.Utils.trim resV) of wild2 {
                             GHC.Types.False -> Common.check2 eta
                             GHC.Types.True -> Common.check6 sc n eta } } }) -}
11f7af06d85f3eae38ae5b773317f069
  check2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
90169b1a99974aa869a0738084475581
  check3 ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
fc363b577e6049d2a212f219016e21dd
  check4 ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
e3a5eea95f0053af098f8535fec5400e
  check5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Error "#) -}
adb5a66bbee5f11a329dffe78afb3689
  check6 ::
    Common.Score
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (sc :: Common.Score)
                   (n :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case sc
                        `cast`
                      (Nth:2
                           (Trans
                                (<GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)>_R
                                 ->_R GHC.Types.N:IO[0] <(GHC.Types.Int, GHC.Types.Int)>_R)
                                (GHC.IORef.N:IORef[0] <(GHC.Types.Int, GHC.Types.Int)>_N
                                 ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             (GHC.Types.Int,
                                              GHC.Types.Int) #)>_R))) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Types.Int, GHC.Types.Int)
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Types.Int, GHC.Types.Int)
                        var#
                        (case ipv1 of wild1 { (,) x y -> (GHC.Num.$fNumInt_$c+ x n, y) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
1d6cfcfc769f03c14c33d665e58f05cd
  check7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
cabf049b083b78fcfbbb6a07da692b92
  createTestTree ::
    Common.Score -> Common.Test -> Test.Tasty.Core.TestTree
  {- Arity: 2, Strictness: <L,U(U)><S(LLLS),1*U(U,U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Common.Score) (w1 :: Common.Test) ->
                 case w1 of ww { Common.Test ww1 ww2 ww3 ww4 ->
                 Common.$wcreateTestTree w ww1 ww2 ww3 ww4 }) -}
d14b357ae40f7d9d46821db09e1465f0
  dirExt ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath -> Language.Egg.Types.Ext -> GHC.IO.FilePath
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (dir :: GHC.IO.FilePath)
                   (name :: GHC.IO.FilePath)
                   (e :: Language.Egg.Types.Ext) ->
                 System.FilePath.Posix.combine
                   Common.mkTest12
                   (System.FilePath.Posix.combine
                      dir
                      (Language.Egg.Types.ext name e))) -}
86cf391a50bd57665b1068db61554f1d
  dynamicError ::
    Language.Egg.UX.PPrint a =>
    a -> Data.Either.Either [GHC.Types.Char] b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U>m1,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (w :: Language.Egg.UX.PPrint a) (w1 :: a) ->
                 Data.Either.Left
                   @ [GHC.Types.Char]
                   @ b
                   (GHC.CString.unpackAppendCString#
                      "Error: expected a "#
                      (w `cast` (Language.Egg.UX.N:PPrint[0] <a>_N) w1))) -}
74ebacdfc588787c4e68ce51ae9c1ab4
  exec :: Language.Egg.UX.Text -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Common.exec1
                  `cast`
                (<Language.Egg.UX.Text>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e3608e419659502c529cc0dd5a69362f
  exec1 ::
    Language.Egg.UX.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (s :: Language.Egg.UX.Text)
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Common.mkTest2
                        Common.exec4
                        (Common.Code s)
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString# Common.exec3 e)
                        GHC.Types.True
                        ipv
                   Data.Either.Right r
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString# Common.exec2 r)
                        GHC.Types.True
                        ipv } }) -}
5b7355ed2d96560dc287c87e041be756
  exec2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Result: "#) -}
c60b4ddf17a989fc1d79cecfc3d40fb9
  exec3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Error: "#) -}
8917b8457b51e38fcca98ddbe501a67d
  exec4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Common.exec5) -}
8bcfe932bb3813a1ffe945b876bdd1f0
  exec5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ghci_test"#) -}
fbd7a418a5edb83d3331fd35e544d44d
  generateSource ::
    GHC.IO.FilePath -> Common.Program' -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Common.mkTest14
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <Common.Program'>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
076fe3619e2d9d5e01f6571df307649d
  getTotal ::
    Common.Score -> GHC.Types.IO (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.STRef.readSTRef1
                   @ GHC.Prim.RealWorld
                   @ (GHC.Types.Int, GHC.Types.Int))
                  `cast`
                (Trans
                     (Sym (GHC.IORef.N:IORef[0]) <(GHC.Types.Int, GHC.Types.Int)>_N
                      ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  (GHC.Types.Int, GHC.Types.Int) #)>_R)
                     (<GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <(GHC.Types.Int, GHC.Types.Int)>_R))) -}
8166d421a4a64eee1297e59ca3b03581
  initScore :: GHC.Types.IO Common.Score
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Common.initScore1
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)>_R)) -}
f734e9e10ede5585c3f3f9dd31030746
  initScore1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.newMutVar#
                        @ (GHC.Types.Int, GHC.Types.Int)
                        @ GHC.Prim.RealWorld
                        (GHC.Types.I# 0#, GHC.Types.I# 0#)
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.STRef.STRef
                       @ GHC.Prim.RealWorld
                       @ (GHC.Types.Int, GHC.Types.Int)
                       ipv1)
                      `cast`
                    (Sym (GHC.IORef.N:IORef[0]) <(GHC.Types.Int,
                                                  GHC.Types.Int)>_N) #) }) -}
7a22b591090d78a22867867eb30295c1
  matchError ::
    [GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (expectE :: [GHC.Types.Char])
                   (resE :: [GHC.Types.Char]) ->
                 let {
                   needle :: [GHC.Types.Char]
                   = GHC.Base.map
                       @ GHC.Types.Char
                       @ GHC.Types.Char
                       GHC.Unicode.toLower
                       expectE
                 } in
                 letrec {
                   tailsGo :: [GHC.Types.Char] -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <L,U> -}
                   = \ (xs :: [GHC.Types.Char]) ->
                     case Data.OldList.isPrefixOf
                            @ GHC.Types.Char
                            GHC.Classes.$fEqChar
                            needle
                            xs of wild {
                       GHC.Types.False
                       -> case xs of wild1 {
                            [] -> GHC.Types.False : ds xs' -> tailsGo xs' }
                       GHC.Types.True -> GHC.Types.True }
                 } in
                 tailsGo
                   (GHC.Base.map
                      @ GHC.Types.Char
                      @ GHC.Types.Char
                      GHC.Unicode.toLower
                      resE)) -}
b5d0780fbc72f6bd079595708b83f226
  mkTest ::
    Common.Score
    -> GHC.Base.String
    -> Common.Program'
    -> Common.Result
    -> Test.Tasty.Core.TestTree
  {- Arity: 4, Strictness: <L,U(U)><L,U><L,U><L,U>,
     Unfolding: (\ (sc :: Common.Score)
                   (name :: GHC.Base.String)
                   (pgm :: Common.Program')
                   (eta :: Common.Result) ->
                 Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   name
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case sc
                           `cast`
                         (Nth:2
                              (Trans
                                   (<GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)>_R
                                    ->_R GHC.Types.N:IO[0] <(GHC.Types.Int, GHC.Types.Int)>_R)
                                   (GHC.IORef.N:IORef[0] <(GHC.Types.Int, GHC.Types.Int)>_N
                                    ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                (GHC.Types.Int,
                                                 GHC.Types.Int) #)>_R))) of wild { GHC.STRef.STRef var# ->
                    case GHC.Prim.readMutVar#
                           @ GHC.Prim.RealWorld
                           @ (GHC.Types.Int, GHC.Types.Int)
                           var#
                           s of ds1 { (#,#) ipv ipv1 ->
                    case GHC.Prim.writeMutVar#
                           @ GHC.Prim.RealWorld
                           @ (GHC.Types.Int, GHC.Types.Int)
                           var#
                           (case ipv1 of wild1 { (,) x y ->
                            (x,
                             case y of wild2 { GHC.Types.I# x1 ->
                             GHC.Types.I# (GHC.Prim.+# x1 1#) }) })
                           ipv of s2# { DEFAULT ->
                    case Common.mkTest2 name pgm s2# of ds2 { (#,#) ipv2 ipv3 ->
                    case Common.check1
                           wild
                             `cast`
                           (Nth:2
                                (Trans
                                     (Sym (GHC.IORef.N:IORef[0]) <(GHC.Types.Int, GHC.Types.Int)>_N
                                      ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  (GHC.Types.Int, GHC.Types.Int) #)>_R)
                                     (<GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <(GHC.Types.Int, GHC.Types.Int)>_R))))
                           Common.mkTest1
                           ipv3
                           eta
                           ipv2 of ds { (#,#) ipv4 ipv5 ->
                    (# ipv4, GHC.Types.[] @ GHC.Types.Char #) } } } } })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
463b1d69691e214ddccae44d56c9e589
  mkTest' ::
    Common.Score
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.IO Common.Result
    -> Common.Result
    -> Test.Tasty.Core.TestTree
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><L,U><L,C(U(U,1*U))><L,U>,
     Unfolding: (\ (sc :: Common.Score)
                   (n :: GHC.Types.Int)
                   (name :: GHC.Base.String)
                   (act :: GHC.Types.IO Common.Result)
                   (expect :: Common.Result) ->
                 Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   name
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case sc
                           `cast`
                         (Nth:2
                              (Trans
                                   (<GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)>_R
                                    ->_R GHC.Types.N:IO[0] <(GHC.Types.Int, GHC.Types.Int)>_R)
                                   (GHC.IORef.N:IORef[0] <(GHC.Types.Int, GHC.Types.Int)>_N
                                    ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                (GHC.Types.Int,
                                                 GHC.Types.Int) #)>_R))) of wild { GHC.STRef.STRef var# ->
                    case GHC.Prim.readMutVar#
                           @ GHC.Prim.RealWorld
                           @ (GHC.Types.Int, GHC.Types.Int)
                           var#
                           s of ds1 { (#,#) ipv ipv1 ->
                    case GHC.Prim.writeMutVar#
                           @ GHC.Prim.RealWorld
                           @ (GHC.Types.Int, GHC.Types.Int)
                           var#
                           (case ipv1 of wild1 { (,) x y -> (x, GHC.Num.$fNumInt_$c+ y n) })
                           ipv of s2# { DEFAULT ->
                    case act `cast` (GHC.Types.N:IO[0] <Common.Result>_R)
                           s2# of ds2 { (#,#) ipv2 ipv3 ->
                    case Common.check1
                           wild
                             `cast`
                           (Nth:2
                                (Trans
                                     (Sym (GHC.IORef.N:IORef[0]) <(GHC.Types.Int, GHC.Types.Int)>_N
                                      ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  (GHC.Types.Int, GHC.Types.Int) #)>_R)
                                     (<GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <(GHC.Types.Int, GHC.Types.Int)>_R))))
                           n
                           ipv3
                           expect
                           ipv2 of ds { (#,#) ipv4 ipv5 ->
                    (# ipv4, GHC.Types.[] @ GHC.Types.Char #) } } } } })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
fc029b6aa6a117138fce3f1dc1f93bef
  mkTest1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
73b4ac2aba3e4022dc82aee14fe1df2f
  mkTest10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Common.mkTest11) -}
5923a3ecb0695f592d18cef3808ee4e5
  mkTest11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("output"#) -}
ce6d722691ea3f4ec2cac9eed23c9c70
  mkTest12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Common.mkTest13) -}
7506f1bae90c611203fcb6d7e8cce395
  mkTest13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tests"#) -}
dc75e34a5b530beaaaf8a963ef24389f
  mkTest14 ::
    GHC.IO.FilePath
    -> Common.Program'
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U><S,1*U><S,U>,
     Unfolding: (\ (ds :: GHC.IO.FilePath)
                   (ds1 :: Common.Program')
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds1 of wild {
                   Common.File -> (# eta, GHC.Tuple.() #)
                   Common.Code pgm
                   -> System.IO.appendFile2
                        @ ()
                        (System.FilePath.Posix.combine
                           Common.mkTest12
                           (System.FilePath.Posix.combine
                              Common.mkTest15
                              (System.FilePath.Posix.addExtension
                                 ds
                                 Language.Egg.Types.$fShowExt10)))
                        GHC.IO.IOMode.WriteMode
                        (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot] ->
                         GHC.IO.Handle.Text.hPutStr1 hdl pgm)
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        eta }) -}
d6a374d6d508f56021b5ee0ee3ee05a1
  mkTest15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Common.mkTest16) -}
6bc1c3ee3cf2bf99f125ddcba0a38ca9
  mkTest16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("input"#) -}
6339a1dc5932516d4500d8da9d5b7ab1
  mkTest2 ::
    GHC.IO.FilePath
    -> Common.Program'
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Common.Result #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: (\ (name :: GHC.IO.FilePath)
                   (pgm :: Common.Program')
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Common.mkTest14 name pgm eta of ds1 { (#,#) ipv ipv1 ->
                 case Common.timeLimit of ww { GHC.Types.I# ww1 ->
                 let {
                   logF :: GHC.IO.FilePath
                   = System.FilePath.Posix.combine
                       Common.mkTest12
                       (System.FilePath.Posix.combine
                          Common.mkTest10
                          (System.FilePath.Posix.addExtension
                             name
                             Language.Egg.Types.$fShowExt2))
                 } in
                 let {
                   resF :: GHC.IO.FilePath
                   = System.FilePath.Posix.combine
                       Common.mkTest12
                       (System.FilePath.Posix.combine
                          Common.mkTest10
                          (System.FilePath.Posix.addExtension
                             name
                             Language.Egg.Types.$fShowExt4))
                 } in
                 case Language.Egg.Utils.$wexecuteShellCommand
                        logF
                        (Text.Printf.uprintfs
                           Common.mkTest8
                           (GHC.List.reverse1
                              @ Text.Printf.UPrintf
                              (GHC.Types.:
                                 @ (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
                                 (Common.mkTest7,
                                  \ (w2 :: Text.Printf.FieldFormat) ->
                                  case w2 of ww2 { Text.Printf.FieldFormat ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                  case ww9 of ww10 { GHC.Types.C# ww11 ->
                                  Text.Printf.$wformatString
                                    @ GHC.Types.Char
                                    Text.Printf.$fIsCharChar
                                    resF
                                    ww3
                                    ww4
                                    ww5
                                    ww11 } })
                                 (GHC.Types.[] @ Text.Printf.UPrintf))
                              (GHC.Types.[] @ Text.Printf.UPrintf))
                           (GHC.Types.[] @ GHC.Types.Char))
                        ww1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Common.mkTest3 resF logF ipv3 ipv2 } } }) -}
a1762f2ef9dd93f1d0b6737854fffbe5
  mkTest3 ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> GHC.IO.Exception.ExitCode
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Common.Result #)
  {- Arity: 4, Strictness: <L,U><L,U><S,1*U><S,U>,
     Unfolding: (\ (resF :: GHC.IO.FilePath)
                   (ds :: GHC.IO.FilePath)
                   (ds1 :: GHC.IO.Exception.ExitCode)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds1 of wild {
                   GHC.IO.Exception.ExitSuccess
                   -> case GHC.IO.Handle.FD.openFile1
                             resF
                             GHC.IO.IOMode.ReadMode
                             eta of ds2 { (#,#) ipv ipv1 ->
                      case GHC.IO.Handle.Text.hGetContents1
                             ipv1
                             ipv of ds3 { (#,#) ipv2 ipv3 ->
                      (# ipv2,
                         Data.Either.Right
                           @ Language.Egg.UX.Text
                           @ GHC.Base.String
                           ipv3 #) } }
                   GHC.IO.Exception.ExitFailure ds2
                   -> case ds2 of wild1 { GHC.Types.I# ds3 ->
                      case ds3 of ds4 {
                        DEFAULT
                        -> case GHC.IO.Handle.FD.openFile1
                                  ds
                                  GHC.IO.IOMode.ReadMode
                                  eta of ds5 { (#,#) ipv ipv1 ->
                           case GHC.IO.Handle.Text.hGetContents1
                                  ipv1
                                  ipv of ds6 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              Data.Either.Left
                                @ GHC.Base.String
                                @ Language.Egg.UX.Text
                                ipv3 #) } }
                        100# -> (# eta, Common.mkTest4 #) } } }) -}
88f8a3d578c09bb1ecb3f8704016c7f4
  mkTest4 ::
    Data.Either.Either Language.Egg.UX.Text Language.Egg.UX.Text
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Language.Egg.UX.Text
                   @ Language.Egg.UX.Text
                   Common.mkTest5) -}
4b5d289f06743228c5fb218880f84745
  mkTest5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Common.mkTest6) -}
49d8db4030f0c3e7e2bf263b69d77775
  mkTest6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TIMEOUT!"#) -}
bc4da2d2c2a586934a603259d1b7cc30
  mkTest7 :: [GHC.Types.Char] -> Text.Printf.FormatParse
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: [GHC.Types.Char]) ->
                 case ds1 of wild {
                   [] -> Text.Printf.errorShortFormat @ Text.Printf.FormatParse
                   : c1 cs
                   -> Text.Printf.FormatParse
                        (GHC.Types.[] @ GHC.Types.Char)
                        c1
                        cs }) -}
12941f75fe7154dd5c0c87e730d62021
  mkTest8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Common.mkTest9) -}
2ec4fe294967c0dde254c28b3c72d540
  mkTest9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("make %s"#) -}
9f8176e4b6f0c68d326c690e1ca1beb1
  overflowError :: Data.Either.Either [GHC.Types.Char] b
  {- Strictness: m1,
     Unfolding: (\ @ b ->
                 Data.Either.Left @ [GHC.Types.Char] @ b Common.overflowError1) -}
9b877d0d0348d278269ded16112e5046
  overflowError1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Common.overflowError2) -}
6ab0b68812b22089d4d87d8d34065cdd
  overflowError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Error: arithmetic overflow"#) -}
a36ab179e2a2e0f368d4057ed8d2d72a
  parseTestFile :: GHC.IO.FilePath -> GHC.Types.IO [Common.Test]
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Common.parseTestFile1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[Common.Test]>_R)) -}
2093d18e06183a0b894ee8f2da0b9562
  parseTestFile1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Common.Test] #)
  {- Arity: 2, Strictness: <L,U><S,U> -}
993a89ac65bf7ad5a1376fcbf0442aad
  rLines :: [GHC.Base.String] -> Data.Either.Either a GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: [GHC.Base.String]) ->
                 Data.Either.Right
                   @ a
                   @ GHC.Base.String
                   (Data.OldList.unlines x)) -}
cfe4ce052c5e487918ae62931dffe3a7
  readResult ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> GHC.IO.Exception.ExitCode
    -> GHC.Types.IO Common.Result
  {- Arity: 4, Strictness: <L,U><L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Common.mkTest3
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R <GHC.IO.Exception.ExitCode>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Common.Result>_R)) -}
1d3f8f05ab6a14e1d6ce3c66b8bf1d0e
  run ::
    GHC.IO.FilePath -> Common.Program' -> GHC.Types.IO Common.Result
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Common.mkTest2
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <Common.Program'>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Common.Result>_R)) -}
dac17d5d0e62940587cbc955e3025dec
  scoreTest' ::
    (GHC.Show.Show b, GHC.Classes.Eq b) =>
    Common.Score
    -> (a -> b, a, b, GHC.Types.Int, GHC.Base.String)
    -> Test.Tasty.Core.TestTree
  {- Arity: 4,
     Strictness: <L,A><L,U(C(C1(U)),A)><L,U(U)><S,1*U(C(U),U,U,U(U),U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ a
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: Common.Score)
                   (w3 :: (a -> b, a, b, GHC.Types.Int, GHC.Base.String)) ->
                 case w3 of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                 Common.$wscoreTest' @ b @ a w1 w2 ww1 ww2 ww3 ww4 ww5 }) -}
7f578708a80007cce8a7cab4443d310c
  scoreTest'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
2b5ca22842529b408cbbb2d5626f436a
  staticError :: a -> Data.Either.Either a b
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (0, True, True) Data.Either.Left -}
2d40c3654119601e9c428d167e8762a8
  testAnf :: Common.Test -> GHC.Types.Bool
  RecSel Left Common.Test
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.Test) ->
                 case ds of wild { Common.Test ds1 ds2 ds3 ds4 -> ds4 }) -}
2d40c3654119601e9c428d167e8762a8
  testCode :: Common.Test -> Common.Program'
  RecSel Left Common.Test
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.Test) ->
                 case ds of wild { Common.Test ds1 ds2 ds3 ds4 -> ds2 }) -}
2d40c3654119601e9c428d167e8762a8
  testName :: Common.Test -> GHC.Base.String
  RecSel Left Common.Test
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.Test) ->
                 case ds of wild { Common.Test ds1 ds2 ds3 ds4 -> ds1 }) -}
2d40c3654119601e9c428d167e8762a8
  testResult :: Common.Test -> Common.TestResult
  RecSel Left Common.Test
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Common.Test) ->
                 case ds of wild { Common.Test ds1 ds2 ds3 ds4 -> ds3 }) -}
6f878bc03d2a2164f6dfddd71ed97d76
  timeLimit :: GHC.Types.Int
  {- Unfolding: (case Common.$w$s^
                        Common.timeLimit2
                        Common.timeLimit1 of ww { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.*# 15# ww) }) -}
d614bfa5f74fb3a03215d10f8e319497
  timeLimit1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (6) -}
ceb663f3514c07434e3b01345e5042d4
  timeLimit2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
a0da0b9cbf62cd33947ca769d1eb5f9b
  updateCurrent :: Common.Score -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Common.check6
                  `cast`
                (<Common.Score>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e5db88835f9818c44bf80bae3cbaf64c
  updateTotal :: Common.Score -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Common.updateTotal1
                  `cast`
                (<Common.Score>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8c1ed0004f885c8c3e0a61b770f7ac0f
  updateTotal1 ::
    Common.Score
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (sc :: Common.Score)
                   (n :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case sc
                        `cast`
                      (Nth:2
                           (Trans
                                (<GHC.IORef.IORef (GHC.Types.Int, GHC.Types.Int)>_R
                                 ->_R GHC.Types.N:IO[0] <(GHC.Types.Int, GHC.Types.Int)>_R)
                                (GHC.IORef.N:IORef[0] <(GHC.Types.Int, GHC.Types.Int)>_N
                                 ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             (GHC.Types.Int,
                                              GHC.Types.Int) #)>_R))) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Types.Int, GHC.Types.Int)
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Types.Int, GHC.Types.Int)
                        var#
                        (case ipv1 of wild1 { (,) x y -> (x, GHC.Num.$fNumInt_$c+ y n) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
instance Data.Aeson.Types.FromJSON.FromJSON [Common.Program']
  = Common.$fFromJSONProgram'
instance Data.Aeson.Types.FromJSON.FromJSON [Common.Test]
  = Common.$fFromJSONTest
instance Data.Aeson.Types.FromJSON.FromJSON [Common.TestResult]
  = Common.$fFromJSONTestResult
instance GHC.Show.Show [Common.Program'] = Common.$fShowProgram'
instance GHC.Show.Show [Common.Test] = Common.$fShowTest
instance GHC.Show.Show [Common.TestResult]
  = Common.$fShowTestResult
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

