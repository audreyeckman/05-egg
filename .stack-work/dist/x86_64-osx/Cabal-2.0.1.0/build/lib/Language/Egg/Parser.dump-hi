
==================== FINAL INTERFACE ====================
2018-03-08 20:29:25.412186 UTC

interface egg-0.1.0.0-BICRyseCZOgDidKW8MZQAr:Language.Egg.Parser 8022
  interface hash: 468ca8c76ec03f6d8c3daf1a9e8492a5
  ABI hash: 11fa3fd6cb5e6050c15c1bf08b26c253
  export-list hash: b6455ba0284ae090c1911991d46573fc
  orphan hash: 27d79f0b412a988c9a01987d6641cc69
  flag hash: b1e83102aaabde7ee89d57c4de6281db
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.Egg.Parser.parse
  Language.Egg.Parser.parseFile
module dependencies: Language.Egg.Types Language.Egg.UX
                     Language.Egg.Utils
package dependencies: array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 case-insensitive-1.2.0.10 cmdargs-0.10.18
                      containers-0.5.10.2 deepseq-1.4.3.0 directory-1.3.0.2
                      filepath-1.4.1.2 ghc-prim-0.5.1.1 hashable-1.2.6.1
                      integer-gmp-1.0.1.0 integer-logarithms-1.0.2 megaparsec-6.3.0
                      mtl-2.2.1 parser-combinators-0.2.1 primitive-0.6.2.0
                      process-1.6.1.0 scientific-0.3.5.2 text-1.2.2.2 time-1.8.0.2
                      transformers-0.5.2.0 unix-2.7.2.2
orphans: hashable-1.2.6.1:Data.Hashable.Generic
         egg-0.1.0.0-BICRyseCZOgDidKW8MZQAr:Language.Egg.Types
         text-1.2.2.2:Data.Text.Lazy text-1.2.2.2:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         megaparsec-6.3.0:Text.Megaparsec
                         megaparsec-6.3.0:Text.Megaparsec.Error
                         megaparsec-6.3.0:Text.Megaparsec.Pos
                         megaparsec-6.3.0:Text.Megaparsec.Stream
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array text-1.2.2.2:Data.Text
                         text-1.2.2.2:Data.Text.Lazy
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Data.Either d7dae5d9bf298dee616e465c14b5d60e
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.List.NonEmpty 70e6872597166c3f77bc4493d6ce77f2
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.IO e261d8b68ccf81a359626fa520b57d1d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 525805ab19df5e4fe6d8de7dde9cb909
import  -/  Language.Egg.Types 26a05ab3461a0d348a47d2147d423df2
  exports: e794af85b5e9584ad8b7e9170c95b371
  Add1 737f70cbf5450f4df80dc0d0266ee33a
  App b2a4af629de6b5e670c56f3a109c24cc
  Bare 4fd33d361786aaceabada0952e2d0ac3
  BareBind f9d02389beda50ee3a0b145a57faf639
  BareDecl 56247e661b5953d21ada9986696db816
  BareProgram 4b32ec200b97764cc64a6cb2301f182b
  Bind ebabe90cd797e1415b32ce682d915700
  Boolean 820679df2396e3f2e45cc8602549e4d0
  Decl ad6e0cec0b34b46f9b8a5336902592fb
  Equal 52fefd5689448f010d1cf423431158e1
  Expr 4fd33d361786aaceabada0952e2d0ac3
  GetItem f380c9d99636bfb091ccac24272873d4
  Greater 23109e1ef5a48c00f5ffe508e8afb17e
  Id 18f0b2b05502c03bb7728f082752dea5
  If bdcfd2d661c009733b44e398bdc0f368
  IsBool 82bb17af1f77bdba211caed89e2c00cb
  IsNum 94f3ace083cc6516db9c9f08dcec7f49
  IsTuple 1233fdb77783f089d5fa0f16dfef4832
  Less aee4460a64a55a2cc3aad6406f95fc2c
  Minus ceb8f65b4b2c439a1742049c2fa3791a
  Number e4985d3308adf5b9041ed30189dd08d2
  Plus 25ee835f50bb717222074e4508029854
  Prim1 3b159609d460fee39be6a935f1089ca5
  Prim1 6911d88e4d344c369a9e3b36d6f724a7
  Prim2 bffbed654032241b26f6f09d283ffedc
  Print 7d2965476309f8b366c164c564269911
  Prog 05d2efb8721dd2b900ebf41946920aef
  Program 0bd0c75aa2b4242ae8dc23003276ae5b
  Sub1 0feaf4c2c2bb721570a42d8c151bbb56
  Times 065b749f0c6805840ecc4001c163e940
  Tuple 6d2bd73d76f75c599e548d02ce8b3e8c
  bindsExpr d376a3c96f2a016411802fadcd95aad6
  getLabel 4fd33d361786aaceabada0952e2d0ac3
import  -/  Language.Egg.UX c097e9ae7ef71bf8bb0d0528f126846e
  SS 712a42694eabc0660dee095bd01d6c14
  SourceSpan 0ca1ce4540bb9d821f6c62b39ed6d31d
  Text 27e9ce5ee8516296253884efe1c8079d
  panic 9b539d12d25b45cc2b1d8ac6a51f73ad
  posSpan 3c25e82a72f4a37a7da84a154b7e5a82
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
import  -/  megaparsec-6.3.0:Text.Megaparsec 226844bc968bdbc252068a158f53fbec
import  -/  megaparsec-6.3.0:Text.Megaparsec.Char 9b2617871f510280852edfebcae33dce
import  -/  megaparsec-6.3.0:Text.Megaparsec.Char.Lexer 5f2edbb2db63e1629ebc9c7e7fb70319
import  -/  megaparsec-6.3.0:Text.Megaparsec.Error 9df3c7397e542f06b67abccd6caa3c26
import  -/  megaparsec-6.3.0:Text.Megaparsec.Expr a03d196caf2bc470291f91811c46b099
import  -/  megaparsec-6.3.0:Text.Megaparsec.Pos 63fdb15be71aad89d18e44789b67eb53
import  -/  parser-combinators-0.2.1:Control.Applicative.Combinators 20174546be783e5467facccb3da90a7a
53f7c5fb3e974528e0284a892deae203
  $s$fAlternativeParsecT ::
    GHC.Base.Alternative
      (Text.Megaparsec.ParsecT
         Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ m :: * -> *.
                  @ (Text.Megaparsec.ParsecT
                       Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m)
                  (Language.Egg.Parser.$s$fAlternativeParsecT_$s$fApplicativeParsecT
                     @ Text.Megaparsec.Pos.SourcePos
                     @ m)
                  (Text.Megaparsec.pZero
                     @ Text.Megaparsec.Pos.SourcePos
                     @ [GHC.Types.Char]
                     @ m)
                  (Language.Egg.Parser.$s$fAlternativeParsecT_$spPlus @ m)
                  (Text.Megaparsec.$fAlternativeParsecT3
                     @ Text.Megaparsec.Pos.SourcePos
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Pos.$fOrdSourcePos
                     Text.Megaparsec.Stream.$fStream[])
                    `cast`
                  (forall (a :: <*>_N).
                   <Text.Megaparsec.ParsecT
                      Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m a>_R
                   ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                                 <Text.Megaparsec.Pos.SourcePos>_N
                                 <[GHC.Types.Char]>_N
                                 <m>_R
                                 <[a]>_R))
                  (Text.Megaparsec.$fAlternativeParsecT1
                     @ Text.Megaparsec.Pos.SourcePos
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Pos.$fOrdSourcePos
                     Text.Megaparsec.Stream.$fStream[])
                    `cast`
                  (forall (a :: <*>_N).
                   <Text.Megaparsec.ParsecT
                      Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m a>_R
                   ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                                 <Text.Megaparsec.Pos.SourcePos>_N
                                 <[GHC.Types.Char]>_N
                                 <m>_R
                                 <[a]>_R)) -}
7012feaf9fdf391d713059190b776bc3
  $s$fAlternativeParsecT_$s$fApplicativeParsecT ::
    GHC.Base.Applicative (Text.Megaparsec.ParsecT e [GHC.Types.Char] m)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e @ m :: * -> *.
                  @ (Text.Megaparsec.ParsecT e [GHC.Types.Char] m)
                  (Text.Megaparsec.$fFunctorParsecT @ e @ [GHC.Types.Char] @ m)
                  (\ @ a -> Text.Megaparsec.pPure @ a @ e @ [GHC.Types.Char] @ m)
                  (Language.Egg.Parser.$s$fAlternativeParsecT_$spAp @ e @ m)
                  (Text.Megaparsec.$fAlternativeParsecT2
                     @ [GHC.Types.Char]
                     @ e
                     @ m
                     Text.Megaparsec.Stream.$fStream[])
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R <Text.Megaparsec.ParsecT e [GHC.Types.Char] m a>_R
                   ->_R <Text.Megaparsec.ParsecT e [GHC.Types.Char] m b>_R
                   ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                                 <e>_N <[GHC.Types.Char]>_N <m>_R <c>_R))
                  (Text.Megaparsec.$fApplicativeParsecT2
                     @ [GHC.Types.Char]
                     @ e
                     @ m
                     Text.Megaparsec.Stream.$fStream[])
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Text.Megaparsec.ParsecT e [GHC.Types.Char] m a>_R
                   ->_R <Text.Megaparsec.ParsecT e [GHC.Types.Char] m b>_R
                   ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                                 <e>_N <[GHC.Types.Char]>_N <m>_R <b>_R))
                  (Text.Megaparsec.$fApplicativeParsecT1
                     @ [GHC.Types.Char]
                     @ e
                     @ m
                     Text.Megaparsec.Stream.$fStream[])
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Text.Megaparsec.ParsecT e [GHC.Types.Char] m a>_R
                   ->_R <Text.Megaparsec.ParsecT e [GHC.Types.Char] m b>_R
                   ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                                 <e>_N <[GHC.Types.Char]>_N <m>_R <a>_R)) -}
3c9deadd0e352931d03a573b7b5bcf32
  $s$fAlternativeParsecT_$spAp ::
    Text.Megaparsec.ParsecT e [GHC.Types.Char] m (a -> b)
    -> Text.Megaparsec.ParsecT e [GHC.Types.Char] m a
    -> Text.Megaparsec.ParsecT e [GHC.Types.Char] m b
  {- Arity: 7,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   @ b
                   (m5 :: Text.Megaparsec.ParsecT e [GHC.Types.Char] m (a -> b))
                   (k15 :: Text.Megaparsec.ParsecT e [GHC.Types.Char] m a)
                   @ b1
                   (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: b
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b1)
                   (eok :: b
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b1) ->
                 m5
                   `cast`
                 (Text.Megaparsec.N:ParsecT[0]
                      <e>_N <[GHC.Types.Char]>_N <m>_R <a -> b>_R)
                   @ b1
                   s1
                   (\ (x6 :: a -> b)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    k15
                      `cast`
                    (Text.Megaparsec.N:ParsecT[0]
                         <e>_N <[GHC.Types.Char]>_N <m>_R <a>_R)
                      @ b1
                      s'
                      (GHC.Base..
                         @ b
                         @ (Text.Megaparsec.State [GHC.Types.Char]
                            -> Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            -> m b1)
                         @ a
                         cok
                         x6)
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ a
                         @ [GHC.Types.Char]
                         @ m
                         @ b1
                         hs
                         (GHC.Base..
                            @ b
                            @ (Text.Megaparsec.State [GHC.Types.Char]
                               -> Text.Megaparsec.Hints
                                    (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                               -> m b1)
                            @ a
                            cok
                            x6))
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ e
                         @ m
                         @ b1
                         hs
                         cerr))
                   cerr
                   (\ (x6 :: a -> b)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    k15
                      `cast`
                    (Text.Megaparsec.N:ParsecT[0]
                         <e>_N <[GHC.Types.Char]>_N <m>_R <a>_R)
                      @ b1
                      s'
                      (GHC.Base..
                         @ b
                         @ (Text.Megaparsec.State [GHC.Types.Char]
                            -> Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            -> m b1)
                         @ a
                         cok
                         x6)
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ a
                         @ [GHC.Types.Char]
                         @ m
                         @ b1
                         hs
                         (GHC.Base..
                            @ b
                            @ (Text.Megaparsec.State [GHC.Types.Char]
                               -> Text.Megaparsec.Hints
                                    (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                               -> m b1)
                            @ a
                            eok
                            x6))
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ e
                         @ m
                         @ b1
                         hs
                         eerr))
                   eerr)
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N) (a :: <*>_N) (b :: <*>_N).
                 <Text.Megaparsec.ParsecT e [GHC.Types.Char] m (a -> b)>_R
                 ->_R <Text.Megaparsec.ParsecT e [GHC.Types.Char] m a>_R
                 ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                               <e>_N <[GHC.Types.Char]>_N <m>_R <b>_R)) -}
b52598d39123cd13e413e02911a17552
  $s$fAlternativeParsecT_$spPlus ::
    Text.Megaparsec.ParsecT
      Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m a
    -> Text.Megaparsec.ParsecT
         Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m a
    -> Text.Megaparsec.ParsecT
         Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m a
  {- Arity: 7,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,U><L,U><L,U><L,U><L,C(C1(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   @ a
                   (m5 :: Text.Megaparsec.ParsecT
                            Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m a)
                   (n :: Text.Megaparsec.ParsecT
                           Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m a)
                   @ b
                   (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: a
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b)
                   (eok :: a
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b) ->
                 m5
                   `cast`
                 (Text.Megaparsec.N:ParsecT[0]
                      <Text.Megaparsec.Pos.SourcePos>_N <[GHC.Types.Char]>_N <m>_R <a>_R)
                   @ b
                   s1
                   cok
                   cerr
                   eok
                   (\ (err :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                Text.Megaparsec.Pos.SourcePos)
                      (ms :: Text.Megaparsec.State [GHC.Types.Char]) ->
                    n `cast`
                    (Text.Megaparsec.N:ParsecT[0]
                         <Text.Megaparsec.Pos.SourcePos>_N <[GHC.Types.Char]>_N <m>_R <a>_R)
                      @ b
                      s1
                      cok
                      (\ (err' :: Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                    Text.Megaparsec.Pos.SourcePos)
                         (s' :: Text.Megaparsec.State [GHC.Types.Char]) ->
                       cerr
                         (let {
                            $j :: Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                    Text.Megaparsec.Pos.SourcePos
                              <join 0>
                            = case err' of wild {
                                Text.Megaparsec.Error.TrivialError s2 u1 p23
                                -> case err of wild1 {
                                     Text.Megaparsec.Error.TrivialError ds2 u2 p24
                                     -> Text.Megaparsec.Error.TrivialError
                                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                          @ Text.Megaparsec.Pos.SourcePos
                                          s2
                                          (case u1 of wild2 {
                                             GHC.Base.Nothing -> u2
                                             GHC.Base.Just x6
                                             -> case u2 of wild3 {
                                                  GHC.Base.Nothing
                                                  -> GHC.Base.Just
                                                       @ (Text.Megaparsec.Error.ErrorItem
                                                            (Text.Megaparsec.Stream.Token
                                                               [GHC.Types.Char]))
                                                       x6
                                                  GHC.Base.Just y
                                                  -> GHC.Base.Just
                                                       @ (Text.Megaparsec.Error.ErrorItem
                                                            (Text.Megaparsec.Stream.Token
                                                               [GHC.Types.Char]))
                                                       (case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                                                               @ (Text.Megaparsec.Stream.Token
                                                                    [GHC.Types.Char])
                                                               GHC.Classes.$fOrdChar
                                                                 `cast`
                                                               (GHC.Classes.Ord
                                                                  (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                                                               y
                                                               x6 of wild4 {
                                                          GHC.Types.False -> y
                                                          GHC.Types.True -> x6 }) } })
                                          (Language.Egg.Parser.$s$fAlternativeParsecT_$sunion1
                                             p23
                                             p24)
                                     Text.Megaparsec.Error.FancyError ds2 ds3 -> wild1 }
                                Text.Megaparsec.Error.FancyError ds2 ds3
                                -> case err of wild1 {
                                     Text.Megaparsec.Error.TrivialError ds4 ds5 ds6 -> wild
                                     Text.Megaparsec.Error.FancyError ds4 x6
                                     -> Text.Megaparsec.Error.FancyError
                                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                          @ Text.Megaparsec.Pos.SourcePos
                                          ds2
                                          (Language.Egg.Parser.$s$fAlternativeParsecT_$sunion
                                             ds3
                                             x6) } }
                          } in
                          case err' of wild {
                            Text.Megaparsec.Error.TrivialError p23 ds2 ds3
                            -> case err of wild1 {
                                 Text.Megaparsec.Error.TrivialError p24 ds4 ds5
                                 -> case Data.List.NonEmpty.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p23
                                           p24 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild }
                                 Text.Megaparsec.Error.FancyError p24 ds4
                                 -> case Data.List.NonEmpty.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p23
                                           p24 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild } }
                            Text.Megaparsec.Error.FancyError p23 ds2
                            -> case err of wild1 {
                                 Text.Megaparsec.Error.TrivialError p24 ds3 ds4
                                 -> case Data.List.NonEmpty.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p23
                                           p24 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild }
                                 Text.Megaparsec.Error.FancyError p24 ds3
                                 -> case Data.List.NonEmpty.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p23
                                           p24 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild } } })
                         (Text.Megaparsec.longestMatch @ [GHC.Types.Char] ms s'))
                      (\ (x6 :: a)
                         (s' :: Text.Megaparsec.State [GHC.Types.Char])
                         (hs :: Text.Megaparsec.Hints
                                  (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                       eok
                         x6
                         s'
                         (GHC.Base.augment
                            @ (Data.Set.Internal.Set
                                 (Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                            (\ @ b1
                               (c :: Data.Set.Internal.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                     -> b1 -> b1)[OneShot]
                               (n1 :: b1)[OneShot] ->
                             case err of wild {
                               Text.Megaparsec.Error.TrivialError errPos ds ps
                               -> case s' of wild1 { Text.Megaparsec.State ds1 ds2 dt ds3 ->
                                  case Data.List.NonEmpty.$fEqNonEmpty_$c==
                                         @ Text.Megaparsec.Pos.SourcePos
                                         Text.Megaparsec.Pos.$fEqSourcePos
                                         ds2
                                         errPos of wild2 {
                                    GHC.Types.False -> n1
                                    GHC.Types.True
                                    -> case ps of wild3 {
                                         Data.Set.Internal.Bin dt1 ds4 ds5 ds6 -> c wild3 n1
                                         Data.Set.Internal.Tip -> n1 } } }
                               Text.Megaparsec.Error.FancyError ds ds1 -> n1 })
                            hs
                              `cast`
                            (Text.Megaparsec.N:Hints[0]
                                 <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))
                           `cast`
                         (Sym (Text.Megaparsec.N:Hints[0]
                                   <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N)))
                      (\ (err' :: Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                    Text.Megaparsec.Pos.SourcePos)
                         (s' :: Text.Megaparsec.State [GHC.Types.Char]) ->
                       eerr
                         (let {
                            $j :: Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                    Text.Megaparsec.Pos.SourcePos
                              <join 0>
                            = case err' of wild {
                                Text.Megaparsec.Error.TrivialError s2 u1 p23
                                -> case err of wild1 {
                                     Text.Megaparsec.Error.TrivialError ds2 u2 p24
                                     -> Text.Megaparsec.Error.TrivialError
                                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                          @ Text.Megaparsec.Pos.SourcePos
                                          s2
                                          (case u1 of wild2 {
                                             GHC.Base.Nothing -> u2
                                             GHC.Base.Just x6
                                             -> case u2 of wild3 {
                                                  GHC.Base.Nothing
                                                  -> GHC.Base.Just
                                                       @ (Text.Megaparsec.Error.ErrorItem
                                                            (Text.Megaparsec.Stream.Token
                                                               [GHC.Types.Char]))
                                                       x6
                                                  GHC.Base.Just y
                                                  -> GHC.Base.Just
                                                       @ (Text.Megaparsec.Error.ErrorItem
                                                            (Text.Megaparsec.Stream.Token
                                                               [GHC.Types.Char]))
                                                       (case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                                                               @ (Text.Megaparsec.Stream.Token
                                                                    [GHC.Types.Char])
                                                               GHC.Classes.$fOrdChar
                                                                 `cast`
                                                               (GHC.Classes.Ord
                                                                  (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                                                               y
                                                               x6 of wild4 {
                                                          GHC.Types.False -> y
                                                          GHC.Types.True -> x6 }) } })
                                          (Language.Egg.Parser.$s$fAlternativeParsecT_$sunion1
                                             p23
                                             p24)
                                     Text.Megaparsec.Error.FancyError ds2 ds3 -> wild1 }
                                Text.Megaparsec.Error.FancyError ds2 ds3
                                -> case err of wild1 {
                                     Text.Megaparsec.Error.TrivialError ds4 ds5 ds6 -> wild
                                     Text.Megaparsec.Error.FancyError ds4 x6
                                     -> Text.Megaparsec.Error.FancyError
                                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                          @ Text.Megaparsec.Pos.SourcePos
                                          ds2
                                          (Language.Egg.Parser.$s$fAlternativeParsecT_$sunion
                                             ds3
                                             x6) } }
                          } in
                          case err' of wild {
                            Text.Megaparsec.Error.TrivialError p23 ds2 ds3
                            -> case err of wild1 {
                                 Text.Megaparsec.Error.TrivialError p24 ds4 ds5
                                 -> case Data.List.NonEmpty.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p23
                                           p24 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild }
                                 Text.Megaparsec.Error.FancyError p24 ds4
                                 -> case Data.List.NonEmpty.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p23
                                           p24 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild } }
                            Text.Megaparsec.Error.FancyError p23 ds2
                            -> case err of wild1 {
                                 Text.Megaparsec.Error.TrivialError p24 ds3 ds4
                                 -> case Data.List.NonEmpty.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p23
                                           p24 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild }
                                 Text.Megaparsec.Error.FancyError p24 ds3
                                 -> case Data.List.NonEmpty.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p23
                                           p24 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild } } })
                         (Text.Megaparsec.longestMatch @ [GHC.Types.Char] ms s'))))
                  `cast`
                (forall (m :: <* -> *>_N) (a :: <*>_N).
                 <Text.Megaparsec.ParsecT
                    Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m a>_R
                 ->_R <Text.Megaparsec.ParsecT
                         Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m a>_R
                 ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                               <Text.Megaparsec.Pos.SourcePos>_N
                               <[GHC.Types.Char]>_N
                               <m>_R
                               <a>_R)) -}
aa491fff620b0681a1234f90dff93220
  $s$fAlternativeParsecT_$sunion ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorFancy Text.Megaparsec.Pos.SourcePos)
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorFancy Text.Megaparsec.Pos.SourcePos)
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorFancy Text.Megaparsec.Pos.SourcePos)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
866fc61ff8281f12a390fa03aea60a1c
  $s$fAlternativeParsecT_$sunion1 ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorItem
            (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorItem
            (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
fde3adb8308767aa694af01d9acd3dfc
  $s$fAlternativeParsecT_$swithHints ::
    Text.Megaparsec.Hints
      (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
        -> Text.Megaparsec.State [GHC.Types.Char] -> m b)
    -> Text.Megaparsec.Error.ParseError
         (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
    -> Text.Megaparsec.State [GHC.Types.Char]
    -> m b
  {- Arity: 3, Strictness: <L,U><C(S),1*C1(U)><S,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ b
                   (ds :: Text.Megaparsec.Hints
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   (c :: Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                         -> Text.Megaparsec.State [GHC.Types.Char] -> m b)
                   (e1 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e) ->
                 case e1 of wild {
                   Text.Megaparsec.Error.TrivialError pos us ps
                   -> c (Text.Megaparsec.Error.TrivialError
                           @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           @ e
                           pos
                           us
                           (Language.Egg.Parser.$s$fAlternativeParsecT_go3
                              (Data.Set.Internal.Tip
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                              (GHC.Types.:
                                 @ (Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                                 ps
                                 ds
                                   `cast`
                                 (Text.Megaparsec.N:Hints[0]
                                      <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))))
                   Text.Megaparsec.Error.FancyError ipv ipv1 -> c wild }) -}
51615b202f950f286f7f97363fe675f8
  $s$fAlternativeParsecT_go3 ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
    -> [Data.Set.Internal.Set
          (Text.Megaparsec.Error.ErrorItem
             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))]
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorItem
            (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
d92422522f3eea445e8fed88b9b5afab
  $s$fEqErrorFancy ::
    GHC.Classes.Eq
      (Text.Megaparsec.Error.ErrorFancy Text.Megaparsec.Pos.SourcePos)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorFancy Text.Megaparsec.Pos.SourcePos)
                  (Text.Megaparsec.Error.$fEqErrorFancy_$c==
                     @ Text.Megaparsec.Pos.SourcePos
                     Text.Megaparsec.Pos.$fEqSourcePos)
                  (\ (a :: Text.Megaparsec.Error.ErrorFancy
                             Text.Megaparsec.Pos.SourcePos)
                     (b :: Text.Megaparsec.Error.ErrorFancy
                             Text.Megaparsec.Pos.SourcePos) ->
                   case Text.Megaparsec.Error.$fEqErrorFancy_$c==
                          @ Text.Megaparsec.Pos.SourcePos
                          Text.Megaparsec.Pos.$fEqSourcePos
                          a
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False }) -}
c6b3a3de07834998a8ce7e141902684c
  $s$fEqErrorFancy_$c/= ::
    Text.Megaparsec.Error.ErrorFancy Text.Megaparsec.Pos.SourcePos
    -> Text.Megaparsec.Error.ErrorFancy Text.Megaparsec.Pos.SourcePos
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Text.Megaparsec.Error.ErrorFancy
                           Text.Megaparsec.Pos.SourcePos)
                   (b :: Text.Megaparsec.Error.ErrorFancy
                           Text.Megaparsec.Pos.SourcePos) ->
                 case Text.Megaparsec.Error.$fEqErrorFancy_$c==
                        @ Text.Megaparsec.Pos.SourcePos
                        Text.Megaparsec.Pos.$fEqSourcePos
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
91e8a623d26e497a2233d8c626c359ae
  $s$fEqErrorItem ::
    GHC.Classes.Eq
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorItem
                       (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                  (Text.Megaparsec.Error.$fEqErrorItem_$c==
                     @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                     GHC.Classes.$fEqChar
                       `cast`
                     (GHC.Classes.Eq (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R)
                  (\ (a :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                     (b :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                   case Text.Megaparsec.Error.$fEqErrorItem_$c==
                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          GHC.Classes.$fEqChar
                            `cast`
                          (GHC.Classes.Eq (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                          a
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False }) -}
5d1c5ac0d68291fb672c9eea232eaee0
  $s$fEqErrorItem_$c/= ::
    Text.Megaparsec.Error.ErrorItem
      (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   (b :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                 case Text.Megaparsec.Error.$fEqErrorItem_$c==
                        @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                        GHC.Classes.$fEqChar
                          `cast`
                        (GHC.Classes.Eq (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
22148fafd6b573095822cf4f19bec9bb
  $s$fMonadParsecT ::
    GHC.Base.Monad (Text.Megaparsec.ParsecT e [GHC.Types.Char] m)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e @ m :: * -> *.
                  @ (Text.Megaparsec.ParsecT e [GHC.Types.Char] m)
                  (Language.Egg.Parser.$s$fAlternativeParsecT_$s$fApplicativeParsecT
                     @ e
                     @ m)
                  (Language.Egg.Parser.$s$fMonadParsecT_$spBind @ e @ m)
                  (Language.Egg.Parser.$s$fMonadParsecT_$s$fMonadParsecT_$c>>
                     @ e
                     @ m)
                  (\ @ a -> Text.Megaparsec.pPure @ a @ e @ [GHC.Types.Char] @ m)
                  (Text.Megaparsec.pFail @ e @ [GHC.Types.Char] @ m) -}
1b4baef904fb930a9a1f8e57b306dbbe
  $s$fMonadParsecT_$s$fMonadParsecT_$c>> ::
    Text.Megaparsec.ParsecT e [GHC.Types.Char] m a
    -> Text.Megaparsec.ParsecT e [GHC.Types.Char] m b
    -> Text.Megaparsec.ParsecT e [GHC.Types.Char] m b
  {- Arity: 7,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   @ b
                   (m5 :: Text.Megaparsec.ParsecT e [GHC.Types.Char] m a)
                   (k15 :: Text.Megaparsec.ParsecT e [GHC.Types.Char] m b)
                   @ b1
                   (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: b
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b1)
                   (eok :: b
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b1) ->
                 m5
                   `cast`
                 (Text.Megaparsec.N:ParsecT[0]
                      <e>_N <[GHC.Types.Char]>_N <m>_R <a>_R)
                   @ b1
                   s1
                   (\ (x6 :: a)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    k15
                      `cast`
                    (Text.Megaparsec.N:ParsecT[0]
                         <e>_N <[GHC.Types.Char]>_N <m>_R <b>_R)
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ b
                         @ [GHC.Types.Char]
                         @ m
                         @ b1
                         hs
                         cok)
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ e
                         @ m
                         @ b1
                         hs
                         cerr))
                   cerr
                   (\ (x6 :: a)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    k15
                      `cast`
                    (Text.Megaparsec.N:ParsecT[0]
                         <e>_N <[GHC.Types.Char]>_N <m>_R <b>_R)
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ b
                         @ [GHC.Types.Char]
                         @ m
                         @ b1
                         hs
                         eok)
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ e
                         @ m
                         @ b1
                         hs
                         eerr))
                   eerr)
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N) (a :: <*>_N) (b :: <*>_N).
                 <Text.Megaparsec.ParsecT e [GHC.Types.Char] m a>_R
                 ->_R <Text.Megaparsec.ParsecT e [GHC.Types.Char] m b>_R
                 ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                               <e>_N <[GHC.Types.Char]>_N <m>_R <b>_R)) -}
c92d66857acdf381828a1bf747d578b4
  $s$fMonadParsecT_$spBind ::
    Text.Megaparsec.ParsecT e [GHC.Types.Char] m a
    -> (a -> Text.Megaparsec.ParsecT e [GHC.Types.Char] m b)
    -> Text.Megaparsec.ParsecT e [GHC.Types.Char] m b
  {- Arity: 7,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(C1(U))))))><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   @ b
                   (m5 :: Text.Megaparsec.ParsecT e [GHC.Types.Char] m a)
                   (k15 :: a -> Text.Megaparsec.ParsecT e [GHC.Types.Char] m b)
                   @ b1
                   (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: b
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b1)
                   (eok :: b
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b1) ->
                 m5
                   `cast`
                 (Text.Megaparsec.N:ParsecT[0]
                      <e>_N <[GHC.Types.Char]>_N <m>_R <a>_R)
                   @ b1
                   s1
                   (\ (x6 :: a)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    (k15 x6)
                      `cast`
                    (Text.Megaparsec.N:ParsecT[0]
                         <e>_N <[GHC.Types.Char]>_N <m>_R <b>_R)
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ b
                         @ [GHC.Types.Char]
                         @ m
                         @ b1
                         hs
                         cok)
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ e
                         @ m
                         @ b1
                         hs
                         cerr))
                   cerr
                   (\ (x6 :: a)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    (k15 x6)
                      `cast`
                    (Text.Megaparsec.N:ParsecT[0]
                         <e>_N <[GHC.Types.Char]>_N <m>_R <b>_R)
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ b
                         @ [GHC.Types.Char]
                         @ m
                         @ b1
                         hs
                         eok)
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ e
                         @ m
                         @ b1
                         hs
                         eerr))
                   eerr)
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N) (a :: <*>_N) (b :: <*>_N).
                 <Text.Megaparsec.ParsecT e [GHC.Types.Char] m a>_R
                 ->_R <a -> Text.Megaparsec.ParsecT e [GHC.Types.Char] m b>_R
                 ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                               <e>_N <[GHC.Types.Char]>_N <m>_R <b>_R)) -}
bc35f5f54e3f4969c4faa2906a3895c4
  $s$fMonadParsecesParsecT ::
    Text.Megaparsec.MonadParsec
      Text.Megaparsec.Pos.SourcePos
      [GHC.Types.Char]
      (Text.Megaparsec.ParsecT
         Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m)
  {- Inline: CONLIKE,
     Unfolding: DFun: @ m :: * -> *.
                  @ Text.Megaparsec.Pos.SourcePos
                  @ [GHC.Types.Char]
                  @ (Text.Megaparsec.ParsecT
                       Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m)
                  Text.Megaparsec.Stream.$fStream[]
                  (Language.Egg.Parser.$s$fAlternativeParsecT @ m)
                  (Language.Egg.Parser.$s$fMonadParsecesParsecT_$s$fMonadPlusParsecT
                     @ m)
                  (Text.Megaparsec.pFailure
                     @ [GHC.Types.Char]
                     @ Text.Megaparsec.Pos.SourcePos
                     @ m)
                  (Text.Megaparsec.pFancyFailure
                     @ Text.Megaparsec.Pos.SourcePos
                     @ [GHC.Types.Char]
                     @ m)
                  (Text.Megaparsec.pLabel
                     @ Text.Megaparsec.Pos.SourcePos
                     @ [GHC.Types.Char]
                     @ m)
                  (\ @ a ->
                   Text.Megaparsec.pLabel
                     @ Text.Megaparsec.Pos.SourcePos
                     @ [GHC.Types.Char]
                     @ m
                     @ a
                     (GHC.Types.[] @ GHC.Types.Char))
                  (Text.Megaparsec.pTry
                     @ Text.Megaparsec.Pos.SourcePos
                     @ [GHC.Types.Char]
                     @ m)
                  (Text.Megaparsec.pLookAhead
                     @ Text.Megaparsec.Pos.SourcePos
                     @ [GHC.Types.Char]
                     @ m)
                  (Language.Egg.Parser.$s$fMonadParsecesParsecT_$spNotFollowedBy
                     @ Text.Megaparsec.Pos.SourcePos
                     @ m)
                  (Text.Megaparsec.pWithRecovery
                     @ [GHC.Types.Char]
                     @ Text.Megaparsec.Pos.SourcePos
                     @ m)
                  (Text.Megaparsec.pObserving
                     @ Text.Megaparsec.Pos.SourcePos
                     @ [GHC.Types.Char]
                     @ m)
                  (\ @ b
                     (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                     (ds :: ()
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            -> m b)
                     (ds1 :: Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                               Text.Megaparsec.Pos.SourcePos
                             -> Text.Megaparsec.State [GHC.Types.Char] -> m b)
                     (eok :: ()
                             -> Text.Megaparsec.State [GHC.Types.Char]
                             -> Text.Megaparsec.Hints
                                  (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                             -> m b)
                     (eerr :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                Text.Megaparsec.Pos.SourcePos
                              -> Text.Megaparsec.State [GHC.Types.Char] -> m b) ->
                   case s1 of wild { Text.Megaparsec.State input ds2 dt w ->
                   case ds2 of wild1 { Data.List.NonEmpty.:| pos z ->
                   case input of wild2 {
                     []
                     -> eok
                          GHC.Tuple.()
                          wild
                          (GHC.Types.[]
                             @ (Data.Set.Internal.Set
                                  (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                            `cast`
                          (Sym (Text.Megaparsec.N:Hints[0]
                                    <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))
                     : t ts
                     -> case pos of apos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                        eerr
                          (Text.Megaparsec.Error.TrivialError
                             @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                             @ Text.Megaparsec.Pos.SourcePos
                             (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                             (GHC.Base.Just
                                @ (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                (Text.Megaparsec.Error.Tokens
                                   @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                   (Text.Megaparsec.nes
                                      @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                      t `cast`
                                      (Sub (Sym (Text.Megaparsec.Stream.D:R:Token[][0]))))))
                             (Data.Set.Internal.$WBin
                                @ (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                (GHC.Types.I# 1#)
                                (Text.Megaparsec.Error.EndOfInput
                                   @ (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                (Data.Set.Internal.Tip
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                                (Data.Set.Internal.Tip
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token [GHC.Types.Char])))))
                          (Text.Megaparsec.$WState
                             @ [GHC.Types.Char]
                             wild2
                             (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                             (GHC.Types.I# dt)
                             w) } } } })
                    `cast`
                  (Sym (Text.Megaparsec.N:ParsecT[0]
                            <Text.Megaparsec.Pos.SourcePos>_N
                            <[GHC.Types.Char]>_N
                            <m>_R
                            <()>_R))
                  (Language.Egg.Parser.$s$fMonadParsecesParsecT_$spToken
                     @ Text.Megaparsec.Pos.SourcePos
                     @ m)
                  (Language.Egg.Parser.$s$fMonadParsecesParsecT_$spTokens
                     @ Text.Megaparsec.Pos.SourcePos
                     @ m)
                  (Language.Egg.Parser.$s$fMonadParsecesParsecT_$spTakeWhileP
                     @ Text.Megaparsec.Pos.SourcePos
                     @ m)
                  (Language.Egg.Parser.$s$fMonadParsecesParsecT_$spTakeWhile1P
                     @ Text.Megaparsec.Pos.SourcePos
                     @ m)
                  (Language.Egg.Parser.$s$fMonadParsecesParsecT_$spTakeP
                     @ Text.Megaparsec.Pos.SourcePos
                     @ m)
                  (\ @ b
                     (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                     (ds :: Text.Megaparsec.State [GHC.Types.Char]
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            -> m b)
                     (ds1 :: Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                               Text.Megaparsec.Pos.SourcePos
                             -> Text.Megaparsec.State [GHC.Types.Char] -> m b)
                     (eok :: Text.Megaparsec.State [GHC.Types.Char]
                             -> Text.Megaparsec.State [GHC.Types.Char]
                             -> Text.Megaparsec.Hints
                                  (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                             -> m b)
                     (ds2 :: Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                               Text.Megaparsec.Pos.SourcePos
                             -> Text.Megaparsec.State [GHC.Types.Char] -> m b) ->
                   eok
                     s1
                     s1
                     (GHC.Types.[]
                        @ (Data.Set.Internal.Set
                             (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                       `cast`
                     (Sym (Text.Megaparsec.N:Hints[0]
                               <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N)))
                    `cast`
                  (Sym (Text.Megaparsec.N:ParsecT[0]
                            <Text.Megaparsec.Pos.SourcePos>_N
                            <[GHC.Types.Char]>_N
                            <m>_R
                            <Text.Megaparsec.State [GHC.Types.Char]>_R))
                  (Text.Megaparsec.pUpdateParserState
                     @ [GHC.Types.Char]
                     @ Text.Megaparsec.Pos.SourcePos
                     @ m) -}
82ac07da1d152c08af9237f1c75056ef
  $s$fMonadParsecesParsecT_$s$fMonadPlusParsecT ::
    GHC.Base.MonadPlus
      (Text.Megaparsec.ParsecT
         Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ m :: * -> *.
                  @ (Text.Megaparsec.ParsecT
                       Text.Megaparsec.Pos.SourcePos [GHC.Types.Char] m)
                  (Language.Egg.Parser.$s$fAlternativeParsecT @ m)
                  (Language.Egg.Parser.$s$fMonadParsecT
                     @ Text.Megaparsec.Pos.SourcePos
                     @ m)
                  (Text.Megaparsec.pZero
                     @ Text.Megaparsec.Pos.SourcePos
                     @ [GHC.Types.Char]
                     @ m)
                  (Language.Egg.Parser.$s$fAlternativeParsecT_$spPlus @ m) -}
e68816aa6abdd33f7f4d8690b38462a6
  $s$fMonadParsecesParsecT_$spNotFollowedBy ::
    Text.Megaparsec.ParsecT e [GHC.Types.Char] m a
    -> Text.Megaparsec.ParsecT e [GHC.Types.Char] m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><S(LLSL),1*U(U,U,U,U)><L,A><L,A><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   (p23 :: Text.Megaparsec.ParsecT e [GHC.Types.Char] m a)
                   @ b
                   (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                   (ds :: ()
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> m b)
                   (ds1 :: Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                           -> Text.Megaparsec.State [GHC.Types.Char] -> m b)
                   (eok :: ()
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b) ->
                 case s1 of wild { Text.Megaparsec.State input pos dt ds2 ->
                 let {
                   what :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                   = case input of wild1 {
                       []
                       -> Text.Megaparsec.Error.EndOfInput
                            @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                       : t ts
                       -> Text.Megaparsec.Error.Tokens
                            @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            (Data.List.NonEmpty.:|
                               @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                               t `cast` (Sub (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))
                               (GHC.Types.[] @ (Text.Megaparsec.Stream.Token [GHC.Types.Char]))) }
                 } in
                 p23
                   `cast`
                 (Text.Megaparsec.N:ParsecT[0]
                      <e>_N <[GHC.Types.Char]>_N <m>_R <a>_R)
                   @ b
                   wild
                   (\ (ds3 :: a)
                      (ds4 :: Text.Megaparsec.State [GHC.Types.Char])
                      (ds5 :: Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    eerr
                      (Text.Megaparsec.Error.TrivialError
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ e
                         pos
                         (GHC.Base.Just
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                            what)
                         (Data.Set.Internal.Tip
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                      wild)
                   (\ (ds3 :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e)
                      (ds4 :: Text.Megaparsec.State [GHC.Types.Char]) ->
                    eok
                      GHC.Tuple.()
                      wild
                      (GHC.Types.[]
                         @ (Data.Set.Internal.Set
                              (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                        `cast`
                      (Sym (Text.Megaparsec.N:Hints[0]
                                <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N)))
                   (\ (ds3 :: a)
                      (ds4 :: Text.Megaparsec.State [GHC.Types.Char])
                      (ds5 :: Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    eerr
                      (Text.Megaparsec.Error.TrivialError
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ e
                         pos
                         (GHC.Base.Just
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                            what)
                         (Data.Set.Internal.Tip
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                      wild)
                   (\ (ds3 :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e)
                      (ds4 :: Text.Megaparsec.State [GHC.Types.Char]) ->
                    eok
                      GHC.Tuple.()
                      wild
                      (GHC.Types.[]
                         @ (Data.Set.Internal.Set
                              (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                        `cast`
                      (Sym (Text.Megaparsec.N:Hints[0]
                                <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))) })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N) (a :: <*>_N).
                 <Text.Megaparsec.ParsecT e [GHC.Types.Char] m a>_R
                 ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                               <e>_N <[GHC.Types.Char]>_N <m>_R <()>_R)) -}
7d5a32c7f493a3e80aeecb555bfddb09
  $s$fMonadParsecesParsecT_$spTakeP ::
    GHC.Base.Maybe GHC.Base.String
    -> GHC.Types.Int
    -> Text.Megaparsec.ParsecT
         e
         [GHC.Types.Char]
         m
         (Text.Megaparsec.Stream.Tokens [GHC.Types.Char])
  {- Arity: 7,
     Strictness: <L,1*U><S(S),1*U(U)><S(LSSL),1*U(U,1*U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,A><L,1*C1(C1(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   (ml :: GHC.Base.Maybe GHC.Base.String)
                   (n :: GHC.Types.Int)
                   @ b
                   (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (ds :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                          -> Text.Megaparsec.State [GHC.Types.Char] -> m b)
                   (ds1 :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b) ->
                 case s1 of wild { Text.Megaparsec.State input ds2 dt w ->
                 case ds2 of wild1 { Data.List.NonEmpty.:| pos z ->
                 let {
                   ps :: Data.Set.Internal.Set
                           (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   = case ml of wild2 {
                       GHC.Base.Nothing
                       -> Data.Set.Internal.Tip
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                       GHC.Base.Just x6
                       -> case x6 of wild3 {
                            []
                            -> Data.Set.Internal.Tip
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                            : a1 as4
                            -> Data.Set.Internal.$WBin
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                 (GHC.Types.I# 1#)
                                 (Text.Megaparsec.Error.Label
                                    @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                    (Data.List.NonEmpty.:| @ GHC.Types.Char a1 as4))
                                 (Data.Set.Internal.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                                 (Data.Set.Internal.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token [GHC.Types.Char]))) } }
                 } in
                 case Text.Megaparsec.Stream.$fStream[]_$ctakeN_ n input of wild2 {
                   GHC.Base.Nothing
                   -> eerr
                        (Text.Megaparsec.Error.TrivialError
                           @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           @ e
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos pos z)
                           (GHC.Base.Just
                              @ (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                              (Text.Megaparsec.Error.EndOfInput
                                 @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                           ps)
                        wild
                   GHC.Base.Just ds3
                   -> case ds3 of wild3 { (,) ts input' ->
                      case Text.Megaparsec.Stream.$fStream[]_$cadvanceN
                             (Data.Proxy.Proxy @ * @ [GHC.Types.Char])
                             w
                             pos
                             ts of npos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                      case pos of apos { Text.Megaparsec.Pos.SourcePos ipv3 ipv4 ipv5 ->
                      let {
                        len :: GHC.Types.Int
                        = case GHC.List.$wlenAcc
                                 @ GHC.Types.Char
                                 ts `cast` (Sub (Text.Megaparsec.Stream.D:R:Tokens[][0]))
                                 0# of ww2 { DEFAULT ->
                          GHC.Types.I# ww2 }
                      } in
                      case GHC.Classes.neInt len n of wild4 {
                        GHC.Types.False
                        -> cok
                             ts
                             (case len of wild5 { GHC.Types.I# y ->
                              Text.Megaparsec.$WState
                                @ [GHC.Types.Char]
                                input'
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                                (GHC.Types.I# (GHC.Prim.+# dt y))
                                w })
                             (GHC.Types.[]
                                @ (Data.Set.Internal.Set
                                     (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                               `cast`
                             (Sym (Text.Megaparsec.N:Hints[0]
                                       <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))
                        GHC.Types.True
                        -> eerr
                             (Text.Megaparsec.Error.TrivialError
                                @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                @ e
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                                (GHC.Base.Just
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                   (Text.Megaparsec.Error.EndOfInput
                                      @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                                ps)
                             (Text.Megaparsec.$WState
                                @ [GHC.Types.Char]
                                input
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                                (GHC.Types.I# dt)
                                w) } } } } } } })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N).
                 <GHC.Base.Maybe GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                               <e>_N
                               <[GHC.Types.Char]>_N
                               <m>_R
                               <Text.Megaparsec.Stream.Tokens [GHC.Types.Char]>_R)) -}
8f4798743d996aba4b52b200155a1f58
  $s$fMonadParsecesParsecT_$spTakeWhile1P ::
    GHC.Base.Maybe GHC.Base.String
    -> (Text.Megaparsec.Stream.Token [GHC.Types.Char]
        -> GHC.Types.Bool)
    -> Text.Megaparsec.ParsecT
         e
         [GHC.Types.Char]
         m
         (Text.Megaparsec.Stream.Tokens [GHC.Types.Char])
  {- Arity: 2, Strictness: <L,1*U><L,C(U)>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   (ml :: GHC.Base.Maybe GHC.Base.String)
                   (f3 :: Text.Megaparsec.Stream.Token [GHC.Types.Char]
                          -> GHC.Types.Bool)
                   @ b
                   (ds :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (ds1 :: Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                           -> Text.Megaparsec.State [GHC.Types.Char] -> m b)
                   (ds2 :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b) ->
                 case ds of wild { Text.Megaparsec.State input ds3 dt w ->
                 case ds3 of wild1 { Data.List.NonEmpty.:| pos z ->
                 let {
                   el4 :: GHC.Base.Maybe
                            (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   = case ml of wild2 {
                       GHC.Base.Nothing
                       -> GHC.Base.Nothing
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                       GHC.Base.Just x6
                       -> case x6 of wild3 {
                            []
                            -> GHC.Base.Nothing
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                            : a1 as4
                            -> GHC.Base.Just
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                 (Text.Megaparsec.Error.Label
                                    @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                    (Data.List.NonEmpty.:| @ GHC.Types.Char a1 as4)) } }
                 } in
                 let {
                   ds4 :: ([GHC.Types.Char], [GHC.Types.Char])
                   = GHC.List.span
                       @ GHC.Types.Char
                       f3
                         `cast`
                       (Sub (Text.Megaparsec.Stream.D:R:Token[][0])
                        ->_R <GHC.Types.Bool>_R)
                       input
                 } in
                 let {
                   ts :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                   = case ds4
                            `cast`
                          ((,)
                             (Sub (Sym (Text.Megaparsec.Stream.D:R:Tokens[][0])))
                             <[GHC.Types.Char]>_R)_R of wild2 { (,) ts1 input' ->
                     ts1 }
                 } in
                 case ds4
                        `cast`
                      ((,)
                         (Sub (Sym (Text.Megaparsec.Stream.D:R:Tokens[][0])))
                         <[GHC.Types.Char]>_R)_R of wild2 { (,) ts1 input' ->
                 case ts1
                        `cast`
                      (Sub (Text.Megaparsec.Stream.D:R:Tokens[][0])) of wild4 {
                   []
                   -> case pos of apos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                      eerr
                        (Text.Megaparsec.Error.TrivialError
                           @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           @ e
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                           (GHC.Base.Just
                              @ (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                              (case input of wild5 {
                                 []
                                 -> Text.Megaparsec.Error.EndOfInput
                                      @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                 : t ts2
                                 -> Text.Megaparsec.Error.Tokens
                                      @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                      (Text.Megaparsec.nes
                                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                         t `cast`
                                         (Sub (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))) }))
                           (case el4 of wild3 {
                              GHC.Base.Nothing
                              -> Data.Set.Internal.Tip
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                              GHC.Base.Just x6
                              -> Data.Set.Internal.singleton
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                   x6 }))
                        (Text.Megaparsec.$WState
                           @ [GHC.Types.Char]
                           input
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                           (GHC.Types.I# dt)
                           w) }
                   : ds7 ds8
                   -> case Text.Megaparsec.Stream.$fStream[]_$cadvanceN
                             (Data.Proxy.Proxy @ * @ [GHC.Types.Char])
                             w
                             pos
                             ts of npos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                      cok
                        ts
                        (case GHC.List.$wlenAcc
                                @ GHC.Types.Char
                                ts `cast` (Sub (Text.Megaparsec.Stream.D:R:Tokens[][0]))
                                0# of ww2 { DEFAULT ->
                         Text.Megaparsec.$WState
                           @ [GHC.Types.Char]
                           input'
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                           (GHC.Types.I# (GHC.Prim.+# dt ww2))
                           w })
                        (case el4 of wild3 {
                           GHC.Base.Nothing
                           -> (GHC.Types.[]
                                 @ (Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                                `cast`
                              (Sym (Text.Megaparsec.N:Hints[0]
                                        <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))
                           GHC.Base.Just l2
                           -> (GHC.Base.build
                                 @ (Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                                 (\ @ a1
                                    (c :: Data.Set.Internal.Set
                                            (Text.Megaparsec.Error.ErrorItem
                                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                          -> a1 -> a1)[OneShot]
                                    (n :: a1)[OneShot] ->
                                  c (Data.Set.Internal.singleton
                                       @ (Text.Megaparsec.Error.ErrorItem
                                            (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                       l2)
                                    n))
                                `cast`
                              (Sym (Text.Megaparsec.N:Hints[0]
                                        <Text.Megaparsec.Stream.Token
                                           [GHC.Types.Char]>_N)) }) } } } } })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N).
                 <GHC.Base.Maybe GHC.Base.String>_R
                 ->_R <Text.Megaparsec.Stream.Token [GHC.Types.Char]
                       -> GHC.Types.Bool>_R
                 ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                               <e>_N
                               <[GHC.Types.Char]>_N
                               <m>_R
                               <Text.Megaparsec.Stream.Tokens [GHC.Types.Char]>_R)) -}
f5bebb11d09eb5662e53d420cc94c5db
  $s$fMonadParsecesParsecT_$spTakeWhileP ::
    GHC.Base.Maybe GHC.Base.String
    -> (Text.Megaparsec.Stream.Token [GHC.Types.Char]
        -> GHC.Types.Bool)
    -> Text.Megaparsec.ParsecT
         e
         [GHC.Types.Char]
         m
         (Text.Megaparsec.Stream.Tokens [GHC.Types.Char])
  {- Arity: 7,
     Strictness: <L,1*U><L,C(U)><S(SS(S(LSS)L)LL),1*U(1*U,1*U(1*U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,A>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   (ml :: GHC.Base.Maybe GHC.Base.String)
                   (f3 :: Text.Megaparsec.Stream.Token [GHC.Types.Char]
                          -> GHC.Types.Bool)
                   @ b
                   (ds :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (ds1 :: Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                           -> Text.Megaparsec.State [GHC.Types.Char] -> m b)
                   (eok :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (ds2 :: Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                           -> Text.Megaparsec.State [GHC.Types.Char] -> m b) ->
                 case ds of wild { Text.Megaparsec.State input ds3 dt w ->
                 case ds3 of wild1 { Data.List.NonEmpty.:| pos z ->
                 let {
                   hs :: Text.Megaparsec.Hints
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                   = case ml of wild2 {
                       GHC.Base.Nothing
                       -> (GHC.Types.[]
                             @ (Data.Set.Internal.Set
                                  (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                            `cast`
                          (Sym (Text.Megaparsec.N:Hints[0]
                                    <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))
                       GHC.Base.Just x6
                       -> case x6 of wild3 {
                            []
                            -> (GHC.Types.[]
                                  @ (Data.Set.Internal.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                                 `cast`
                               (Sym (Text.Megaparsec.N:Hints[0]
                                         <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))
                            : a1 as4
                            -> (GHC.Base.build
                                  @ (Data.Set.Internal.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                                  (\ @ a2
                                     (c :: Data.Set.Internal.Set
                                             (Text.Megaparsec.Error.ErrorItem
                                                (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                           -> a2 -> a2)[OneShot]
                                     (n :: a2)[OneShot] ->
                                   c (Data.Set.Internal.$WBin
                                        @ (Text.Megaparsec.Error.ErrorItem
                                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                        (GHC.Types.I# 1#)
                                        (Text.Megaparsec.Error.Label
                                           @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                           (Data.List.NonEmpty.:| @ GHC.Types.Char a1 as4))
                                        (Data.Set.Internal.Tip
                                           @ (Text.Megaparsec.Error.ErrorItem
                                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                                        (Data.Set.Internal.Tip
                                           @ (Text.Megaparsec.Error.ErrorItem
                                                (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                                     n))
                                 `cast`
                               (Sym (Text.Megaparsec.N:Hints[0]
                                         <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N)) } }
                 } in
                 let {
                   ds4 :: ([GHC.Types.Char], [GHC.Types.Char])
                   = GHC.List.span
                       @ GHC.Types.Char
                       f3
                         `cast`
                       (Sub (Text.Megaparsec.Stream.D:R:Token[][0])
                        ->_R <GHC.Types.Bool>_R)
                       input
                 } in
                 let {
                   ts :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                   = case ds4
                            `cast`
                          ((,)
                             (Sub (Sym (Text.Megaparsec.Stream.D:R:Tokens[][0])))
                             <[GHC.Types.Char]>_R)_R of wild2 { (,) ts1 input' ->
                     ts1 }
                 } in
                 case Text.Megaparsec.Stream.$fStream[]_$cadvanceN
                        (Data.Proxy.Proxy @ * @ [GHC.Types.Char])
                        w
                        pos
                        ts of npos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                 case ds4
                        `cast`
                      ((,)
                         (Sub (Sym (Text.Megaparsec.Stream.D:R:Tokens[][0])))
                         <[GHC.Types.Char]>_R)_R of wild2 { (,) ts1 input' ->
                 case ts1
                        `cast`
                      (Sub (Text.Megaparsec.Stream.D:R:Tokens[][0])) of wild4 {
                   []
                   -> eok
                        ts
                        (case GHC.List.$wlenAcc
                                @ GHC.Types.Char
                                ts `cast` (Sub (Text.Megaparsec.Stream.D:R:Tokens[][0]))
                                0# of ww2 { DEFAULT ->
                         Text.Megaparsec.$WState
                           @ [GHC.Types.Char]
                           input'
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                           (GHC.Types.I# (GHC.Prim.+# dt ww2))
                           w })
                        hs
                   : ds7 ds8
                   -> cok
                        ts
                        (case GHC.List.$wlenAcc
                                @ GHC.Types.Char
                                ts `cast` (Sub (Text.Megaparsec.Stream.D:R:Tokens[][0]))
                                0# of ww2 { DEFAULT ->
                         Text.Megaparsec.$WState
                           @ [GHC.Types.Char]
                           input'
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                           (GHC.Types.I# (GHC.Prim.+# dt ww2))
                           w })
                        hs } } } } })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N).
                 <GHC.Base.Maybe GHC.Base.String>_R
                 ->_R <Text.Megaparsec.Stream.Token [GHC.Types.Char]
                       -> GHC.Types.Bool>_R
                 ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                               <e>_N
                               <[GHC.Types.Char]>_N
                               <m>_R
                               <Text.Megaparsec.Stream.Tokens [GHC.Types.Char]>_R)) -}
c333824346a08d3b9aaeca7549a32340
  $s$fMonadParsecesParsecT_$spToken ::
    (Text.Megaparsec.Stream.Token [GHC.Types.Char]
     -> Data.Either.Either
          (GHC.Base.Maybe
             (Text.Megaparsec.Error.ErrorItem
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])),
           Data.Set.Internal.Set
             (Text.Megaparsec.Error.ErrorItem
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
          a)
    -> GHC.Base.Maybe (Text.Megaparsec.Stream.Token [GHC.Types.Char])
    -> Text.Megaparsec.ParsecT e [GHC.Types.Char] m a
  {- Arity: 2, Strictness: <L,C(U)><L,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   (test :: Text.Megaparsec.Stream.Token [GHC.Types.Char]
                            -> Data.Either.Either
                                 (GHC.Base.Maybe
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Stream.Token [GHC.Types.Char])),
                                  Data.Set.Internal.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                                 a)
                   (mtoken :: GHC.Base.Maybe
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   @ b
                   (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: a
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (ds :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                          -> Text.Megaparsec.State [GHC.Types.Char] -> m b)
                   (ds1 :: a
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b) ->
                 case s1 of wild { Text.Megaparsec.State input ds2 dt w ->
                 case ds2 of wild1 { Data.List.NonEmpty.:| pos z ->
                 case input of wild2 {
                   []
                   -> eerr
                        (Text.Megaparsec.Error.TrivialError
                           @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           @ e
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos pos z)
                           (GHC.Base.Just
                              @ (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                              (Text.Megaparsec.Error.EndOfInput
                                 @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                           (case mtoken of wild3 {
                              GHC.Base.Nothing
                              -> Data.Set.Internal.Tip
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                              GHC.Base.Just x6
                              -> Data.Set.Internal.$WBin
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                                   (GHC.Types.I# 1#)
                                   (Text.Megaparsec.Error.Tokens
                                      @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                      (Text.Megaparsec.nes
                                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                         x6))
                                   (Data.Set.Internal.Tip
                                      @ (Text.Megaparsec.Error.ErrorItem
                                           (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                                   (Data.Set.Internal.Tip
                                      @ (Text.Megaparsec.Error.ErrorItem
                                           (Text.Megaparsec.Stream.Token [GHC.Types.Char]))) }))
                        wild
                   : t ts
                   -> case test
                             t `cast`
                             (Sub (Sym (Text.Megaparsec.Stream.D:R:Token[][0]))) of wild4 {
                        Data.Either.Left ds4
                        -> case ds4 of wild5 { (,) us ps ->
                           case pos of apos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                           eerr
                             (Text.Megaparsec.Error.TrivialError
                                @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                @ e
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                                us
                                ps)
                             (Text.Megaparsec.$WState
                                @ [GHC.Types.Char]
                                wild2
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                                (GHC.Types.I# dt)
                                w) } }
                        Data.Either.Right x6
                        -> case Text.Megaparsec.Stream.$fStream[]_$cadvance1
                                  (Data.Proxy.Proxy @ * @ [GHC.Types.Char])
                                  w
                                  pos
                                  t `cast`
                                  (Sub (Sym (Text.Megaparsec.Stream.D:R:Token[][0]))) of npos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                           cok
                             x6
                             (Text.Megaparsec.$WState
                                @ [GHC.Types.Char]
                                ts
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                                (GHC.Types.I# (GHC.Prim.+# dt 1#))
                                w)
                             (GHC.Types.[]
                                @ (Data.Set.Internal.Set
                                     (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                               `cast`
                             (Sym (Text.Megaparsec.N:Hints[0]
                                       <Text.Megaparsec.Stream.Token
                                          [GHC.Types.Char]>_N)) } } } } })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N) (a :: <*>_N).
                 <Text.Megaparsec.Stream.Token [GHC.Types.Char]
                  -> Data.Either.Either
                       (GHC.Base.Maybe
                          (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])),
                        Data.Set.Internal.Set
                          (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                       a>_R
                 ->_R <GHC.Base.Maybe
                         (Text.Megaparsec.Stream.Token [GHC.Types.Char])>_R
                 ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                               <e>_N <[GHC.Types.Char]>_N <m>_R <a>_R)) -}
5ca0f9fae377d7f08c4ad27819cb2002
  $s$fMonadParsecesParsecT_$spTokens ::
    (Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
     -> Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
     -> GHC.Types.Bool)
    -> Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
    -> Text.Megaparsec.ParsecT
         e
         [GHC.Types.Char]
         m
         (Text.Megaparsec.Stream.Tokens [GHC.Types.Char])
  {- Arity: 2, Strictness: <L,C(C1(U))><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   (f3 :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                          -> Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                          -> GHC.Types.Bool)
                   (tts :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char])
                   @ b
                   (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (ds :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                          -> Text.Megaparsec.State [GHC.Types.Char] -> m b)
                   (eok :: Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                            -> Text.Megaparsec.State [GHC.Types.Char] -> m b) ->
                 case s1 of wild { Text.Megaparsec.State input ds1 dt w ->
                 case ds1 of wild1 { Data.List.NonEmpty.:| pos z ->
                 let {
                   unexpect :: Data.List.NonEmpty.NonEmpty
                                 Text.Megaparsec.Pos.SourcePos
                               -> Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                               -> Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Stream.Token [GHC.Types.Char]) e
                     {- Arity: 2 -}
                   = \ (pos' :: Data.List.NonEmpty.NonEmpty
                                  Text.Megaparsec.Pos.SourcePos)
                       (u :: Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                     Text.Megaparsec.Error.TrivialError
                       @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                       @ e
                       pos'
                       (GHC.Base.Just
                          @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                          u)
                       (Data.Set.Internal.$WBin
                          @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                          (GHC.Types.I# 1#)
                          (Text.Megaparsec.Error.Tokens
                             @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                             (case tts
                                     `cast`
                                   (Trans
                                        (Sub (Text.Megaparsec.Stream.D:R:Tokens[][0]))
                                        ([Sub (Sym (Text.Megaparsec.Stream.D:R:Token[][0]))])_R) of wild2 {
                                []
                                -> Data.List.NonEmpty.fromList1
                                     @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                : a1 as4
                                -> Data.List.NonEmpty.:|
                                     @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                     a1
                                     as4 }))
                          (Data.Set.Internal.Tip
                             @ (Text.Megaparsec.Error.ErrorItem
                                  (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                          (Data.Set.Internal.Tip
                             @ (Text.Megaparsec.Error.ErrorItem
                                  (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                 } in
                 let {
                   len :: GHC.Types.Int
                   = case GHC.List.$wlenAcc
                            @ GHC.Types.Char
                            tts `cast` (Sub (Text.Megaparsec.Stream.D:R:Tokens[][0]))
                            0# of ww2 { DEFAULT ->
                     GHC.Types.I# ww2 }
                 } in
                 case Text.Megaparsec.Stream.$fStream[]_$ctakeN_
                        len
                        input of wild2 {
                   GHC.Base.Nothing
                   -> eerr
                        (unexpect
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos pos z)
                           (Text.Megaparsec.Error.EndOfInput
                              @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                        wild
                   GHC.Base.Just ds2
                   -> case ds2 of wild3 { (,) tts' input' ->
                      case f3 tts tts' of wild4 {
                        GHC.Types.False
                        -> case pos of apos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                           eerr
                             (unexpect
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                                (Text.Megaparsec.Error.Tokens
                                   @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                   (case tts'
                                           `cast`
                                         (Trans
                                              (Sub (Text.Megaparsec.Stream.D:R:Tokens[][0]))
                                              ([Sub (Sym (Text.Megaparsec.Stream.D:R:Token[][0]))])_R) of wild5 {
                                      []
                                      -> Data.List.NonEmpty.fromList1
                                           @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                      : a1 as4
                                      -> Data.List.NonEmpty.:|
                                           @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                           a1
                                           as4 })))
                             (Text.Megaparsec.$WState
                                @ [GHC.Types.Char]
                                input
                                (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                                (GHC.Types.I# dt)
                                w) }
                        GHC.Types.True
                        -> case Text.Megaparsec.Stream.$fStream[]_$cadvanceN
                                  (Data.Proxy.Proxy @ * @ [GHC.Types.Char])
                                  w
                                  pos
                                  tts' of npos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                           let {
                             st :: Text.Megaparsec.State [GHC.Types.Char]
                             = case len of wild5 { GHC.Types.I# y ->
                               Text.Megaparsec.$WState
                                 @ [GHC.Types.Char]
                                 input'
                                 (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                                 (GHC.Types.I# (GHC.Prim.+# dt y))
                                 w }
                           } in
                           case tts
                                  `cast`
                                (Sub (Text.Megaparsec.Stream.D:R:Tokens[][0])) of wild7 {
                             []
                             -> eok
                                  tts'
                                  st
                                  (GHC.Types.[]
                                     @ (Data.Set.Internal.Set
                                          (Text.Megaparsec.Error.ErrorItem
                                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                                    `cast`
                                  (Sym (Text.Megaparsec.N:Hints[0]
                                            <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))
                             : ds4 ds5
                             -> cok
                                  tts'
                                  st
                                  (GHC.Types.[]
                                     @ (Data.Set.Internal.Set
                                          (Text.Megaparsec.Error.ErrorItem
                                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                                    `cast`
                                  (Sym (Text.Megaparsec.N:Hints[0]
                                            <Text.Megaparsec.Stream.Token
                                               [GHC.Types.Char]>_N)) } } } } } } })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N).
                 <Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                  -> Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
                  -> GHC.Types.Bool>_R
                 ->_R <Text.Megaparsec.Stream.Tokens [GHC.Types.Char]>_R
                 ->_R Sym (Text.Megaparsec.N:ParsecT[0]
                               <e>_N
                               <[GHC.Types.Char]>_N
                               <m>_R
                               <Text.Megaparsec.Stream.Tokens [GHC.Types.Char]>_R)) -}
0b9ede3e0af56dd46f4ff30fd4673d5d
  $s$fOrdErrorFancy ::
    GHC.Classes.Ord
      (Text.Megaparsec.Error.ErrorFancy Text.Megaparsec.Pos.SourcePos)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorFancy Text.Megaparsec.Pos.SourcePos)
                  Language.Egg.Parser.$s$fEqErrorFancy
                  (Text.Megaparsec.Error.$fOrdErrorFancy_$ccompare
                     @ Text.Megaparsec.Pos.SourcePos
                     Text.Megaparsec.Pos.$fOrdSourcePos)
                  (Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                     @ Text.Megaparsec.Pos.SourcePos
                     Text.Megaparsec.Pos.$fOrdSourcePos)
                  (\ (a :: Text.Megaparsec.Error.ErrorFancy
                             Text.Megaparsec.Pos.SourcePos)
                     (b :: Text.Megaparsec.Error.ErrorFancy
                             Text.Megaparsec.Pos.SourcePos) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Text.Megaparsec.Pos.SourcePos
                          Text.Megaparsec.Pos.$fOrdSourcePos
                          b
                          a of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a :: Text.Megaparsec.Error.ErrorFancy
                             Text.Megaparsec.Pos.SourcePos)
                     (b :: Text.Megaparsec.Error.ErrorFancy
                             Text.Megaparsec.Pos.SourcePos) ->
                   Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                     @ Text.Megaparsec.Pos.SourcePos
                     Text.Megaparsec.Pos.$fOrdSourcePos
                     b
                     a)
                  (\ (a :: Text.Megaparsec.Error.ErrorFancy
                             Text.Megaparsec.Pos.SourcePos)
                     (b :: Text.Megaparsec.Error.ErrorFancy
                             Text.Megaparsec.Pos.SourcePos) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Text.Megaparsec.Pos.SourcePos
                          Text.Megaparsec.Pos.$fOrdSourcePos
                          a
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x6 :: Text.Megaparsec.Error.ErrorFancy
                              Text.Megaparsec.Pos.SourcePos)
                     (y :: Text.Megaparsec.Error.ErrorFancy
                             Text.Megaparsec.Pos.SourcePos) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Text.Megaparsec.Pos.SourcePos
                          Text.Megaparsec.Pos.$fOrdSourcePos
                          y
                          x6 of wild {
                     GHC.Types.False -> y GHC.Types.True -> x6 })
                  (\ (x6 :: Text.Megaparsec.Error.ErrorFancy
                              Text.Megaparsec.Pos.SourcePos)
                     (y :: Text.Megaparsec.Error.ErrorFancy
                             Text.Megaparsec.Pos.SourcePos) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Text.Megaparsec.Pos.SourcePos
                          Text.Megaparsec.Pos.$fOrdSourcePos
                          y
                          x6 of wild {
                     GHC.Types.False -> x6 GHC.Types.True -> y }) -}
e78e73459c106ac3785371e4c2d5ab6d
  $s$fOrdErrorItem ::
    GHC.Classes.Ord
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorItem
                       (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                  Language.Egg.Parser.$s$fEqErrorItem
                  (Text.Megaparsec.Error.$fOrdErrorItem_$ccompare
                     @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                     GHC.Classes.$fOrdChar
                       `cast`
                     (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R)
                  (Text.Megaparsec.Error.$fOrdErrorItem_$c<
                     @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                     GHC.Classes.$fOrdChar
                       `cast`
                     (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R)
                  (\ (a :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                     (b :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                          b
                          a of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                     (b :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                   Text.Megaparsec.Error.$fOrdErrorItem_$c<
                     @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                     GHC.Classes.$fOrdChar
                       `cast`
                     (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                     b
                     a)
                  (\ (a :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                     (b :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                          a
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x6 :: Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                     (y :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                          y
                          x6 of wild {
                     GHC.Types.False -> y GHC.Types.True -> x6 })
                  (\ (x6 :: Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                     (y :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord (Sym (Text.Megaparsec.Stream.D:R:Token[][0])))_R
                          y
                          x6 of wild {
                     GHC.Types.False -> x6 GHC.Types.True -> y }) -}
07e1c03c7551e136918bc3002e8767c1
  $sinsertR_go3 ::
    GHC.Classes.Ord a1 =>
    a1 -> a1 -> Data.Set.Internal.Set a1 -> Data.Set.Internal.Set a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><S,1*U> -}
6a2584fea11d50830070ced311fc8cf5
  $sinsert_go3 ::
    GHC.Classes.Ord a1 =>
    a1 -> a1 -> Data.Set.Internal.Set a1 -> Data.Set.Internal.Set a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><S,1*U> -}
bf05e474894832e3077367780126ff9a
  $sskipBlockComment1 ::
    Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
    -> Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
    -> forall b.
       Text.Megaparsec.State [GHC.Types.Char]
       -> (()
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> (()
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 7,
     Strictness: <S,U><L,U><S(LSLL),1*U(U,U(U(U,U,U),U),U,U(U))><L,C(C(C1(U)))><L,C(U)><L,1*C1(C1(C1(U)))><L,1*C1(U)> -}
aece98bf054fcb7037c905fc7afca583
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.Egg.Parser.$trModule3
                   Language.Egg.Parser.$trModule1) -}
7bb76936e3f88dc901f5c54464f9c8a0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.Egg.Parser.$trModule2) -}
866f3572eb77a03716d68e19838c06d1
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.Egg.Parser"#) -}
f6f5bf4c23d665229a536c5fe4a437d4
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.Egg.Parser.$trModule4) -}
a0024aa409ac8dfef5849f9b82c09450
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("egg-0.1.0.0-BICRyseCZOgDidKW8MZQAr"#) -}
fe1b6257fe102d7580c0019a91249660
  $w$sskipLineComment ::
    Text.Megaparsec.Stream.Tokens [GHC.Types.Char]
    -> forall b1.
       [GHC.Types.Char]
       -> Text.Megaparsec.Pos.SourcePos
       -> [Text.Megaparsec.Pos.SourcePos]
       -> GHC.Prim.Int#
       -> Text.Megaparsec.Pos.Pos
       -> (()
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b1)
       -> (()
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 9,
     Strictness: <S,U><L,U><L,U(U,U,U)><L,U><L,U><L,U(U)><L,C(C1(C1(U)))><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0] -}
0e97e5b7f1d05da7f2de21bfff2e7cb0
  $w$sspace ::
    Text.Megaparsec.ParsecT
      Text.Megaparsec.Pos.SourcePos
      Language.Egg.UX.Text
      Data.Functor.Identity.Identity
      ()
    -> Text.Megaparsec.ParsecT
         Text.Megaparsec.Pos.SourcePos
         Language.Egg.UX.Text
         Data.Functor.Identity.Identity
         ()
    -> Text.Megaparsec.ParsecT
         Text.Megaparsec.Pos.SourcePos
         Language.Egg.UX.Text
         Data.Functor.Identity.Identity
         ()
    -> forall b.
       Text.Megaparsec.State [GHC.Types.Char]
       -> (()
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> (()
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 7,
     Strictness: <C(C(C(C(C(S))))),C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,U(U,U(U(U,U,U),U),U,U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))>,
     Inline: [0] -}
7e8c228e9940539f9f46cb0950adfc7f
  $widentifier ::
    [GHC.Types.Char]
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (Language.Egg.UX.Text
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 8,
     Strictness: <S,1*U><L,U(U,U,U)><L,U><L,U><L,U(U)><L,C(C1(C1(U)))><L,U><L,1*C1(C1(U))>,
     Inline: [0] -}
3dd5b40ecb71a5109076e7cfbf980777
  $wlvl ::
    [GHC.Types.Char]
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S,1*U><L,U(U,U,U)><L,U><L,U><L,U><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ b
                   (ww :: [GHC.Types.Char])
                   (ww1 :: Text.Megaparsec.Pos.SourcePos)
                   (ww2 :: [Text.Megaparsec.Pos.SourcePos])
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: Text.Megaparsec.Pos.Pos)
                   (w :: ()
                         -> Text.Megaparsec.State [GHC.Types.Char]
                         -> Text.Megaparsec.Hints
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         -> Data.Functor.Identity.Identity b)
                   (w1 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            Text.Megaparsec.Pos.SourcePos
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 case ww of wild {
                   []
                   -> w GHC.Tuple.()
                        (Text.Megaparsec.State
                           @ [GHC.Types.Char]
                           (GHC.Types.[] @ GHC.Types.Char)
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww1 ww2)
                           ww3
                           ww4)
                        (GHC.Types.[]
                           @ (Data.Set.Internal.Set
                                (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                          `cast`
                        (Sym (Text.Megaparsec.N:Hints[0]
                                  <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))
                   : t ts
                   -> case ww1 of apos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                      w1
                        (Text.Megaparsec.Error.TrivialError
                           @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           @ Text.Megaparsec.Pos.SourcePos
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos ww2)
                           (GHC.Base.Just
                              @ (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                              (Text.Megaparsec.Error.Tokens
                                 @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                 (Text.Megaparsec.nes
                                    @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                                    t `cast` (Sub (Sym (Text.Megaparsec.Stream.D:R:Token[][0]))))))
                           Language.Egg.Parser.parse3)
                        (Text.Megaparsec.State
                           @ [GHC.Types.Char]
                           wild
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos ww2)
                           ww3
                           ww4) } }) -}
9104eed35f5c1530a717ed0e4937eed5
  $wsc ::
    [GHC.Types.Char]
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 7,
     Strictness: <S,1*U><L,U(U,U,U)><L,U><L,U><L,U(U)><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0] -}
cf0bb145e9ecbf44380a8c7c9292d650
  type Parser =
    Text.Megaparsec.Parsec
      Text.Megaparsec.Pos.SourcePos Language.Egg.UX.Text
    :: * -> *
2205f4d2a470f42a559b5b883a8db837
  expr :: Language.Egg.Parser.Parser Language.Egg.Types.Bare
f639616d5fa4e606c5a46d6f72a425ce
  parse ::
    GHC.IO.FilePath
    -> Language.Egg.UX.Text -> Language.Egg.Types.BareProgram
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (f :: GHC.IO.FilePath) (s :: Language.Egg.UX.Text) ->
                 case (Text.Megaparsec.$fApplicativeParsecT1
                         @ [GHC.Types.Char]
                         @ Text.Megaparsec.Pos.SourcePos
                         @ Data.Functor.Identity.Identity
                         Text.Megaparsec.Stream.$fStream[]
                         @ Language.Egg.Types.BareProgram
                         @ ()
                         Language.Egg.Parser.parse4
                           `cast`
                         (Sym (Text.Megaparsec.N:ParsecT[0]
                                   <Text.Megaparsec.Pos.SourcePos>_N
                                   <[GHC.Types.Char]>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.Egg.Types.BareProgram>_R))
                         Language.Egg.Parser.parse2
                           `cast`
                         (Sym (Text.Megaparsec.N:ParsecT[0]
                                   <Text.Megaparsec.Pos.SourcePos>_N
                                   <[GHC.Types.Char]>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <()>_R))
                         @ (Text.Megaparsec.Reply
                              Text.Megaparsec.Pos.SourcePos
                              Language.Egg.UX.Text
                              Language.Egg.Types.BareProgram)
                         (Text.Megaparsec.State
                            @ Language.Egg.UX.Text
                            s
                            (Data.List.NonEmpty.:|
                               @ Text.Megaparsec.Pos.SourcePos
                               (Text.Megaparsec.Pos.initialPos f)
                               (GHC.Types.[] @ Text.Megaparsec.Pos.SourcePos))
                            0#
                            Text.Megaparsec.Pos.defaultTabWidth_a
                              `cast`
                            (Sym (Text.Megaparsec.Pos.N:Pos[0])))
                         (Text.Megaparsec.$fMonadContParsecT5
                            @ Text.Megaparsec.Pos.SourcePos
                            @ Language.Egg.UX.Text
                            @ Language.Egg.Types.BareProgram)
                           `cast`
                         (<Language.Egg.Types.BareProgram>_R
                          ->_R <Text.Megaparsec.State Language.Egg.UX.Text>_R
                          ->_R <Text.Megaparsec.Hints
                                  (Text.Megaparsec.Stream.Token Language.Egg.UX.Text)>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Reply
                                           Text.Megaparsec.Pos.SourcePos
                                           Language.Egg.UX.Text
                                           Language.Egg.Types.BareProgram>_R))
                         (Text.Megaparsec.$fMonadContParsecT4
                            @ Language.Egg.UX.Text
                            @ Text.Megaparsec.Pos.SourcePos
                            @ Language.Egg.Types.BareProgram)
                           `cast`
                         (<Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Stream.Token Language.Egg.UX.Text)
                             Text.Megaparsec.Pos.SourcePos>_R
                          ->_R <Text.Megaparsec.State Language.Egg.UX.Text>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Reply
                                           Text.Megaparsec.Pos.SourcePos
                                           Language.Egg.UX.Text
                                           Language.Egg.Types.BareProgram>_R))
                         (Text.Megaparsec.$fMonadContParsecT3
                            @ Text.Megaparsec.Pos.SourcePos
                            @ Language.Egg.UX.Text
                            @ Language.Egg.Types.BareProgram)
                           `cast`
                         (<Language.Egg.Types.BareProgram>_R
                          ->_R <Text.Megaparsec.State Language.Egg.UX.Text>_R
                          ->_R <Text.Megaparsec.Hints
                                  (Text.Megaparsec.Stream.Token Language.Egg.UX.Text)>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Reply
                                           Text.Megaparsec.Pos.SourcePos
                                           Language.Egg.UX.Text
                                           Language.Egg.Types.BareProgram>_R))
                         (Text.Megaparsec.$fMonadContParsecT2
                            @ Language.Egg.UX.Text
                            @ Text.Megaparsec.Pos.SourcePos
                            @ Language.Egg.Types.BareProgram)
                           `cast`
                         (<Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Stream.Token Language.Egg.UX.Text)
                             Text.Megaparsec.Pos.SourcePos>_R
                          ->_R <Text.Megaparsec.State Language.Egg.UX.Text>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Reply
                                           Text.Megaparsec.Pos.SourcePos
                                           Language.Egg.UX.Text
                                           Language.Egg.Types.BareProgram>_R)))
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Text.Megaparsec.Reply
                              Text.Megaparsec.Pos.SourcePos
                              Language.Egg.UX.Text
                              Language.Egg.Types.BareProgram>_R) of wild { Text.Megaparsec.Reply s' ds result ->
                 case result of wild1 {
                   Text.Megaparsec.OK x6 -> x6
                   Text.Megaparsec.Error e1 -> Language.Egg.Parser.parse1 e1 } }) -}
347ea0282a54ba0a5ec548c577be47d6
  parse1 ::
    Text.Megaparsec.Error.ParseError
      (Text.Megaparsec.Stream.Token Language.Egg.UX.Text)
      Text.Megaparsec.Pos.SourcePos
    -> Language.Egg.Types.BareProgram
  {- Arity: 1, Strictness: <B,1*U>x -}
b683f3f51230f1429a97c8f900349b9b
  parse10 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U(U,U,U),U),U,U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: (\ @ b
                   (w :: Text.Megaparsec.State [GHC.Types.Char])
                   (w1 :: ()
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            Text.Megaparsec.Pos.SourcePos
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: ()
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            Text.Megaparsec.Pos.SourcePos
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 Language.Egg.Parser.$w$sspace
                   Language.Egg.Parser.parse19
                     `cast`
                   (Sym (Text.Megaparsec.N:ParsecT[0]
                             <Text.Megaparsec.Pos.SourcePos>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   Language.Egg.Parser.parse16
                     `cast`
                   (Sym (Text.Megaparsec.N:ParsecT[0]
                             <Text.Megaparsec.Pos.SourcePos>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   Language.Egg.Parser.parse11
                     `cast`
                   (Sym (Text.Megaparsec.N:ParsecT[0]
                             <Text.Megaparsec.Pos.SourcePos>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   @ b
                   w
                   w1
                   w2
                   w3) -}
bd8b0d5c145aef86553eed8c96a0a846
  parse11 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Language.Egg.Parser.$sskipBlockComment1
                   Language.Egg.Parser.parse14
                     `cast`
                   (Sub (Sym (Text.Megaparsec.Stream.D:R:Tokens[][0])))
                   Language.Egg.Parser.parse12
                     `cast`
                   (Sub (Sym (Text.Megaparsec.Stream.D:R:Tokens[][0])))) -}
2684df7add9f4309cc39714a3fc82b23
  parse12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Egg.Parser.parse13) -}
3cd8a506232cae9ccb2c1031af4a3910
  parse13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("*/"#) -}
571c8d68bd5083f0f474765e504ccf08
  parse14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Egg.Parser.parse15) -}
02c74a4dcf9c26aa04d61866629d7886
  parse15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/*"#) -}
df70d66506b318ff49b530e1557d2c42
  parse16 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <S(LSSL),1*U(U,1*U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Unfolding: (\ @ b1
                   (w :: Text.Megaparsec.State [GHC.Types.Char])
                   (w1 :: ()
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            Text.Megaparsec.Pos.SourcePos
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: ()
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            Text.Megaparsec.Pos.SourcePos
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1) ->
                 case w of ww { Text.Megaparsec.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { Data.List.NonEmpty.:| ww6 ww7 ->
                 Language.Egg.Parser.$w$sskipLineComment
                   Language.Egg.Parser.parse17
                     `cast`
                   (Sub (Sym (Text.Megaparsec.Stream.D:R:Tokens[][0])))
                   @ b1
                   ww1
                   ww6
                   ww7
                   ww3
                   ww4
                   w1
                   w3
                   w4 } }) -}
1386e16bd6411a0b6cca78761592821b
  parse17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Egg.Parser.parse18) -}
bc79ceea92283a94c9f2fea4536951cb
  parse18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("//"#) -}
7320763aa086dfd558a12f92f7468f75
  parse19 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <S(SSSL),1*U(1*U,1*U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,A><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Megaparsec.State [GHC.Types.Char])
                   (w1 :: ()
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            Text.Megaparsec.Pos.SourcePos
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: ()
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            Text.Megaparsec.Pos.SourcePos
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1) ->
                 case w of ww { Text.Megaparsec.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { Data.List.NonEmpty.:| ww6 ww7 ->
                 Language.Egg.Parser.$wsc @ b1 ww1 ww6 ww7 ww3 ww4 w1 w4 } }) -}
071f6873a293e59ed922e9cf702fee68
  parse2 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(SSSL),1*U(1*U,1*U(U(U,U,U),U),U,U)><L,A><L,A><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Megaparsec.State [GHC.Types.Char])
                   (w1 :: ()
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            Text.Megaparsec.Pos.SourcePos
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: ()
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            Text.Megaparsec.Pos.SourcePos
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Megaparsec.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { Data.List.NonEmpty.:| ww6 ww7 ->
                 Language.Egg.Parser.$wlvl @ b ww1 ww6 ww7 ww3 ww4 w3 w4 } }) -}
564003c149a36e35f22f81fd6bbd580f
  parse20 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> ((Language.Egg.UX.Text, Language.Egg.UX.SourceSpan)
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> ((Language.Egg.UX.Text, Language.Egg.UX.SourceSpan)
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Language.Egg.Parser.parse22
                   @ Language.Egg.UX.Text
                   Language.Egg.Parser.parse21
                     `cast`
                   (Sym (Text.Megaparsec.N:ParsecT[0]
                             <Text.Megaparsec.Pos.SourcePos>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <Language.Egg.UX.Text>_R))) -}
55b9ae1599df7172ff1f320aa8a5adf5
  parse21 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> (Language.Egg.UX.Text
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (Language.Egg.UX.Text
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <S(SSSL),1*U(1*U,1*U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,U><L,A><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Megaparsec.State [GHC.Types.Char])
                   (w1 :: Language.Egg.UX.Text
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            Text.Megaparsec.Pos.SourcePos
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Language.Egg.UX.Text
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            Text.Megaparsec.Pos.SourcePos
                          -> Text.Megaparsec.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b1) ->
                 case w of ww { Text.Megaparsec.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { Data.List.NonEmpty.:| ww6 ww7 ->
                 Language.Egg.Parser.$widentifier
                   @ b1
                   ww1
                   ww6
                   ww7
                   ww3
                   ww4
                   w1
                   w2
                   w4 } }) -}
8bd54eca8032dc27fd493dd37d92bf90
  parse22 ::
    Language.Egg.Parser.Parser a
    -> forall b.
       Text.Megaparsec.State [GHC.Types.Char]
       -> ((a, Language.Egg.UX.SourceSpan)
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> ((a, Language.Egg.UX.SourceSpan)
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U(U,U(U(U,U,U),U),U,U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ a
                   (p23 :: Language.Egg.Parser.Parser a)
                   @ b
                   (eta :: Text.Megaparsec.State [GHC.Types.Char])
                   (eta1 :: (a, Language.Egg.UX.SourceSpan)
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: (a, Language.Egg.UX.SourceSpan)
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b) ->
                 let {
                   p24 :: Text.Megaparsec.Pos.SourcePos
                   = case eta of wild { Text.Megaparsec.State ds ds1 dt ds2 ->
                     case ds1 of wild1 { Data.List.NonEmpty.:| a1 ds3 -> a1 } }
                 } in
                 p23
                   `cast`
                 (Text.Megaparsec.N:ParsecT[0]
                      <Text.Megaparsec.Pos.SourcePos>_N
                      <[GHC.Types.Char]>_N
                      <Data.Functor.Identity.Identity>_R
                      <a>_R)
                   @ b
                   eta
                   (\ (x6 :: a)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    eta1
                      (x6,
                       case p24 of dt { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                       case s' of wild { Text.Megaparsec.State ds ds1 dt1 ds2 ->
                       case ds1 of wild1 { Data.List.NonEmpty.:| a1 ds3 ->
                       case a1 of dt2 { Text.Megaparsec.Pos.SourcePos ipv3 ipv4 ipv5 ->
                       Language.Egg.UX.SS dt dt2 } } } })
                      s'
                      hs)
                   eta2
                   (\ (x6 :: a)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    eta3
                      (x6,
                       case p24 of dt { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                       case s' of wild { Text.Megaparsec.State ds ds1 dt1 ds2 ->
                       case ds1 of wild1 { Data.List.NonEmpty.:| a1 ds3 ->
                       case a1 of dt2 { Text.Megaparsec.Pos.SourcePos ipv3 ipv4 ipv5 ->
                       Language.Egg.UX.SS dt dt2 } } } })
                      s'
                      hs)
                   (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                      @ Text.Megaparsec.Pos.SourcePos
                      @ Data.Functor.Identity.Identity
                      @ b
                      (GHC.Types.[]
                         @ (Data.Set.Internal.Set
                              (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                        `cast`
                      (Sym (Text.Megaparsec.N:Hints[0]
                                <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))
                      eta4)) -}
e4654aff29b84a9e0d76c0057b061386
  parse23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Egg.Parser.parse24) -}
39465587001c6deec10533df93bbce11
  parse24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("def"#) -}
668c90a8b56e2a9d34d35b56576aff26
  parse25 ::
    GHC.Base.String
    -> forall b.
       Text.Megaparsec.State [GHC.Types.Char]
       -> (Language.Egg.UX.SourceSpan
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> (Language.Egg.UX.SourceSpan
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <S,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
8495d9ff050c09011b179e0f575589b8
  parse26 ::
    Language.Egg.Parser.Parser (Language.Egg.UX.SourceSpan -> a)
    -> forall b.
       Text.Megaparsec.State [GHC.Types.Char]
       -> (a
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> (a
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U(U,U(U(U,U,U),U),U,U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ a
                   (p23 :: Language.Egg.Parser.Parser
                             (Language.Egg.UX.SourceSpan -> a))
                   @ b
                   (eta :: Text.Megaparsec.State [GHC.Types.Char])
                   (eta1 :: a
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: a
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b) ->
                 let {
                   p24 :: Text.Megaparsec.Pos.SourcePos
                   = case eta of wild { Text.Megaparsec.State ds ds1 dt ds2 ->
                     case ds1 of wild1 { Data.List.NonEmpty.:| a1 ds3 -> a1 } }
                 } in
                 p23
                   `cast`
                 (Text.Megaparsec.N:ParsecT[0]
                      <Text.Megaparsec.Pos.SourcePos>_N
                      <[GHC.Types.Char]>_N
                      <Data.Functor.Identity.Identity>_R
                      <Language.Egg.UX.SourceSpan -> a>_R)
                   @ b
                   eta
                   (\ (x6 :: Language.Egg.UX.SourceSpan -> a)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    eta1
                      (x6
                         (case p24 of dt { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                          case s' of wild { Text.Megaparsec.State ds ds1 dt1 ds2 ->
                          case ds1 of wild1 { Data.List.NonEmpty.:| a1 ds3 ->
                          case a1 of dt2 { Text.Megaparsec.Pos.SourcePos ipv3 ipv4 ipv5 ->
                          Language.Egg.UX.SS dt dt2 } } } }))
                      s'
                      hs)
                   eta2
                   (\ (x6 :: Language.Egg.UX.SourceSpan -> a)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    eta3
                      (x6
                         (case p24 of dt { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                          case s' of wild { Text.Megaparsec.State ds ds1 dt1 ds2 ->
                          case ds1 of wild1 { Data.List.NonEmpty.:| a1 ds3 ->
                          case a1 of dt2 { Text.Megaparsec.Pos.SourcePos ipv3 ipv4 ipv5 ->
                          Language.Egg.UX.SS dt dt2 } } } }))
                      s'
                      hs)
                   (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                      @ Text.Megaparsec.Pos.SourcePos
                      @ Data.Functor.Identity.Identity
                      @ b
                      (GHC.Types.[]
                         @ (Data.Set.Internal.Set
                              (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char]))))
                        `cast`
                      (Sym (Text.Megaparsec.N:Hints[0]
                                <Text.Megaparsec.Stream.Token [GHC.Types.Char]>_N))
                      eta4)) -}
13f2e6052a8dae53925bb22d518e1931
  parse3 ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Set.Internal.Bin
                   @ (Text.Megaparsec.Error.ErrorItem
                        (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   1#
                   (Text.Megaparsec.Error.EndOfInput
                      @ (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                   (Data.Set.Internal.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char])))
                   (Data.Set.Internal.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token [GHC.Types.Char])))) -}
95fd28da86f7a2de56055f4620056318
  parse4 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> (Language.Egg.Types.BareProgram
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (Language.Egg.Types.BareProgram
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U(U,U,U),U),U,U)><L,C(U)><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (eta :: Text.Megaparsec.State [GHC.Types.Char])
                   (eta1 :: Language.Egg.Types.BareProgram
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: Language.Egg.Types.BareProgram
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 Language.Egg.Parser.$w$sspace
                   Language.Egg.Parser.parse19
                     `cast`
                   (Sym (Text.Megaparsec.N:ParsecT[0]
                             <Text.Megaparsec.Pos.SourcePos>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   Language.Egg.Parser.parse16
                     `cast`
                   (Sym (Text.Megaparsec.N:ParsecT[0]
                             <Text.Megaparsec.Pos.SourcePos>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   Language.Egg.Parser.parse11
                     `cast`
                   (Sym (Text.Megaparsec.N:ParsecT[0]
                             <Text.Megaparsec.Pos.SourcePos>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   @ b1
                   eta
                   (\ (x6 :: ())
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])[OneShot]
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))[OneShot] ->
                    Language.Egg.Parser.parse5
                      @ b1
                      s'
                      eta1
                      eta2
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ Language.Egg.Types.BareProgram
                         @ [GHC.Types.Char]
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         eta1)
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ Text.Megaparsec.Pos.SourcePos
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         eta2))
                   eta2
                   (\ (x6 :: ())
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])[OneShot]
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))[OneShot] ->
                    Language.Egg.Parser.parse5
                      @ b1
                      s'
                      eta1
                      eta2
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ Language.Egg.Types.BareProgram
                         @ [GHC.Types.Char]
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         eta3)
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ Text.Megaparsec.Pos.SourcePos
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         eta4))) -}
14f876916ef4724a460d1ded04a81517
  parse5 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> (Language.Egg.Types.Program Language.Egg.UX.SourceSpan
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> (Language.Egg.Types.Program Language.Egg.UX.SourceSpan
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U(U,U,U),U),U,U)><L,C(U)><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: Language.Egg.Types.Program Language.Egg.UX.SourceSpan
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Language.Egg.Types.Program Language.Egg.UX.SourceSpan
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.$w$cmany
                   @ Text.Megaparsec.Pos.SourcePos
                   @ [GHC.Types.Char]
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Stream.$fStream[]
                   @ Language.Egg.Types.BareDecl
                   Language.Egg.Parser.parse6
                     `cast`
                   (Sym (Text.Megaparsec.N:ParsecT[0]
                             <Text.Megaparsec.Pos.SourcePos>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <Language.Egg.Types.Decl Language.Egg.UX.SourceSpan>_R))
                   @ b1
                   s1
                   (\ (x6 :: [Language.Egg.Types.Decl Language.Egg.UX.SourceSpan])
                      (eta :: Text.Megaparsec.State [GHC.Types.Char])
                      (eta1 :: Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    Language.Egg.Parser.expr
                      `cast`
                    (Text.Megaparsec.N:ParsecT[0]
                         <Text.Megaparsec.Pos.SourcePos>_N
                         <[GHC.Types.Char]>_N
                         <Data.Functor.Identity.Identity>_R
                         <Language.Egg.Types.Expr Language.Egg.UX.SourceSpan>_R)
                      @ b1
                      eta
                      (\ (x7 :: Language.Egg.Types.Expr Language.Egg.UX.SourceSpan) ->
                       cok (Language.Egg.Types.$WProg @ Language.Egg.UX.SourceSpan x6 x7))
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ (Language.Egg.Types.Expr Language.Egg.UX.SourceSpan)
                         @ [GHC.Types.Char]
                         @ Data.Functor.Identity.Identity
                         @ b1
                         eta1
                         (\ (x7 :: Language.Egg.Types.Expr Language.Egg.UX.SourceSpan) ->
                          cok
                            (Language.Egg.Types.$WProg @ Language.Egg.UX.SourceSpan x6 x7)))
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ Text.Megaparsec.Pos.SourcePos
                         @ Data.Functor.Identity.Identity
                         @ b1
                         eta1
                         cerr))
                   cerr
                   (\ (x6 :: [Language.Egg.Types.Decl Language.Egg.UX.SourceSpan])
                      (eta :: Text.Megaparsec.State [GHC.Types.Char])
                      (eta1 :: Text.Megaparsec.Hints
                                 (Text.Megaparsec.Stream.Token [GHC.Types.Char])) ->
                    Language.Egg.Parser.expr
                      `cast`
                    (Text.Megaparsec.N:ParsecT[0]
                         <Text.Megaparsec.Pos.SourcePos>_N
                         <[GHC.Types.Char]>_N
                         <Data.Functor.Identity.Identity>_R
                         <Language.Egg.Types.Expr Language.Egg.UX.SourceSpan>_R)
                      @ b1
                      eta
                      (\ (x7 :: Language.Egg.Types.Expr Language.Egg.UX.SourceSpan) ->
                       cok (Language.Egg.Types.$WProg @ Language.Egg.UX.SourceSpan x6 x7))
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ (Language.Egg.Types.Expr Language.Egg.UX.SourceSpan)
                         @ [GHC.Types.Char]
                         @ Data.Functor.Identity.Identity
                         @ b1
                         eta1
                         (\ (x7 :: Language.Egg.Types.Expr Language.Egg.UX.SourceSpan) ->
                          eok
                            (Language.Egg.Types.$WProg @ Language.Egg.UX.SourceSpan x6 x7)))
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ Text.Megaparsec.Pos.SourcePos
                         @ Data.Functor.Identity.Identity
                         @ b1
                         eta1
                         eerr))) -}
2ca689525137451e4419dbd18d13ecf2
  parse6 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> (Language.Egg.Types.Decl Language.Egg.UX.SourceSpan
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (Language.Egg.Types.Decl Language.Egg.UX.SourceSpan
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Language.Egg.Parser.parse26
                   @ (Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                   Language.Egg.Parser.parse7
                     `cast`
                   (Sym (Text.Megaparsec.N:ParsecT[0]
                             <Text.Megaparsec.Pos.SourcePos>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <Language.Egg.UX.SourceSpan
                              -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan>_R))) -}
8f6c3927bedc208492a33c6585e23086
  parse7 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> ((Language.Egg.UX.SourceSpan
         -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ((Language.Egg.UX.SourceSpan
         -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: (Language.Egg.UX.SourceSpan
                            -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: (Language.Egg.UX.SourceSpan
                            -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 Language.Egg.Parser.parse25
                   Language.Egg.Parser.parse23
                   @ b1
                   s1
                   (\ (x6 :: Language.Egg.UX.SourceSpan)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])[OneShot]
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))[OneShot] ->
                    Language.Egg.Parser.parse8
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ (Language.Egg.UX.SourceSpan
                            -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                         @ [GHC.Types.Char]
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         cok)
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ Text.Megaparsec.Pos.SourcePos
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         cerr))
                   cerr
                   (\ (x6 :: Language.Egg.UX.SourceSpan)
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])[OneShot]
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))[OneShot] ->
                    Language.Egg.Parser.parse8
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ (Language.Egg.UX.SourceSpan
                            -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                         @ [GHC.Types.Char]
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         eok)
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ Text.Megaparsec.Pos.SourcePos
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         eerr))
                   eerr) -}
87217634f669942c4950f938c8a4c5af
  parse8 ::
    Text.Megaparsec.State [GHC.Types.Char]
    -> ((Language.Egg.UX.SourceSpan
         -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> ((Language.Egg.UX.SourceSpan
         -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Text.Megaparsec.Hints
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token [GHC.Types.Char])
          Text.Megaparsec.Pos.SourcePos
        -> Text.Megaparsec.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Megaparsec.State [GHC.Types.Char])
                   (cok :: (Language.Egg.UX.SourceSpan
                            -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: (Language.Egg.UX.SourceSpan
                            -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                           -> Text.Megaparsec.State [GHC.Types.Char]
                           -> Text.Megaparsec.Hints
                                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                              Text.Megaparsec.Pos.SourcePos
                            -> Text.Megaparsec.State [GHC.Types.Char]
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Megaparsec.$fApplicativeParsecT1
                   @ [GHC.Types.Char]
                   @ Text.Megaparsec.Pos.SourcePos
                   @ Data.Functor.Identity.Identity
                   Text.Megaparsec.Stream.$fStream[]
                   @ (Language.Egg.UX.Text, Language.Egg.UX.SourceSpan)
                   @ ()
                   Language.Egg.Parser.parse20
                     `cast`
                   (Sym (Text.Megaparsec.N:ParsecT[0]
                             <Text.Megaparsec.Pos.SourcePos>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <(Language.Egg.UX.Text, Language.Egg.UX.SourceSpan)>_R))
                   Language.Egg.Parser.parse10
                     `cast`
                   (Sym (Text.Megaparsec.N:ParsecT[0]
                             <Text.Megaparsec.Pos.SourcePos>_N
                             <[GHC.Types.Char]>_N
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   @ b1
                   s1
                   (\ (x6 :: (Language.Egg.Types.Id, Language.Egg.UX.SourceSpan))
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])[OneShot]
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))[OneShot] ->
                    Language.Egg.Parser.parse9
                      (case x6 of wild { (,) x7 ds ->
                       case x7 of dt { DEFAULT ->
                       Language.Egg.Types.Bind @ Language.Egg.UX.SourceSpan dt ds } })
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ (Language.Egg.UX.SourceSpan
                            -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                         @ [GHC.Types.Char]
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         cok)
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ Text.Megaparsec.Pos.SourcePos
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         cerr))
                   cerr
                   (\ (x6 :: (Language.Egg.Types.Id, Language.Egg.UX.SourceSpan))
                      (s' :: Text.Megaparsec.State [GHC.Types.Char])[OneShot]
                      (hs :: Text.Megaparsec.Hints
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))[OneShot] ->
                    Language.Egg.Parser.parse9
                      (case x6 of wild { (,) x7 ds ->
                       case x7 of dt { DEFAULT ->
                       Language.Egg.Types.Bind @ Language.Egg.UX.SourceSpan dt ds } })
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.accHints
                         @ (Text.Megaparsec.Stream.Token [GHC.Types.Char])
                         @ (Language.Egg.UX.SourceSpan
                            -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                         @ [GHC.Types.Char]
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         eok)
                      (Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
                         @ Text.Megaparsec.Pos.SourcePos
                         @ Data.Functor.Identity.Identity
                         @ b1
                         hs
                         eerr))
                   eerr) -}
fd6c6d653e4427b87d2d4ec58f35d6e4
  parse9 ::
    Language.Egg.Types.BareBind
    -> forall b.
       Text.Megaparsec.State [GHC.Types.Char]
       -> ((Language.Egg.UX.SourceSpan
            -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> ((Language.Egg.UX.SourceSpan
            -> Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Text.Megaparsec.Hints
                (Text.Megaparsec.Stream.Token [GHC.Types.Char])
           -> Data.Functor.Identity.Identity b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token [GHC.Types.Char])
             Text.Megaparsec.Pos.SourcePos
           -> Text.Megaparsec.State [GHC.Types.Char]
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
998e42a1b415b754fec1429e8bd0f4b9
  parseFile ::
    GHC.IO.FilePath -> GHC.Types.IO (Language.Egg.Types.Program ())
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.Egg.Parser.parseFile1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Language.Egg.Types.Program ()>_R)) -}
e391f810e84cc3795a0dbdd36a6d9fd9
  parseFile1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Language.Egg.Types.Program () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (f :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        f
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    case Language.Egg.Parser.parse
                           f
                           ipv3 of ww { Language.Egg.Types.Prog ww1 ww2 ->
                    case Language.Egg.Types.$fFunctorDecl_$c<$1
                           @ ()
                           @ Language.Egg.UX.SourceSpan
                           GHC.Tuple.()
                           ww2 of dt { DEFAULT ->
                    Language.Egg.Types.Prog
                      @ ()
                      (GHC.Base.map
                         @ (Language.Egg.Types.Decl Language.Egg.UX.SourceSpan)
                         @ (Language.Egg.Types.Decl ())
                         Language.Egg.Parser.parseFile2
                         ww1)
                      dt } } #) } }) -}
1ba6049d81ef8fa18c9ce460c84d59f0
  parseFile2 ::
    Language.Egg.Types.Decl Language.Egg.UX.SourceSpan
    -> Language.Egg.Types.Decl ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(SL)LSL),1*U(U(U,A),1*U,U,A)>m,
     Unfolding: (\ (w1 :: Language.Egg.Types.Decl
                            Language.Egg.UX.SourceSpan) ->
                 case w1 of ww { Language.Egg.Types.Decl ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Language.Egg.Types.Bind ww6 ww7 ->
                 case Language.Egg.Types.$fFunctorDecl_$c<$1
                        @ ()
                        @ Language.Egg.UX.SourceSpan
                        GHC.Tuple.()
                        ww3 of dt { DEFAULT ->
                 Language.Egg.Types.Decl
                   @ ()
                   (Language.Egg.Types.Bind @ () ww6 GHC.Tuple.())
                   (GHC.Base.map
                      @ (Language.Egg.Types.Bind Language.Egg.UX.SourceSpan)
                      @ (Language.Egg.Types.Bind ())
                      Language.Egg.Parser.parseFile3
                      ww2)
                   dt
                   GHC.Tuple.() } } }) -}
e94c0fba7f76a6cc6787bf3e93a642b4
  parseFile3 ::
    Language.Egg.Types.Bind Language.Egg.UX.SourceSpan
    -> Language.Egg.Types.Bind ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(U,A)>m,
     Unfolding: (\ (ds :: Language.Egg.Types.Bind
                            Language.Egg.UX.SourceSpan) ->
                 case ds of wild { Language.Egg.Types.Bind a1 a2 ->
                 Language.Egg.Types.Bind @ () a1 GHC.Tuple.() }) -}
"SPEC/Language.Egg.Parser $fAlternativeParsecT @ SourcePos @ [Char] _" [orphan] forall @ m :: *
                                                                                              -> *
                                                                                       (v1 :: Text.Megaparsec.Stream.Stream
                                                                                                [GHC.Types.Char])
                                                                                       (v :: GHC.Classes.Ord
                                                                                               Text.Megaparsec.Pos.SourcePos)
  Text.Megaparsec.$fAlternativeParsecT @ Text.Megaparsec.Pos.SourcePos
                                       @ [GHC.Types.Char]
                                       @ m
                                       v
                                       v1
  = Language.Egg.Parser.$s$fAlternativeParsecT @ m
"SPEC/Language.Egg.Parser $fApplicativeParsecT @ [Char] _ _" [orphan] forall @ e
                                                                             @ m :: * -> *
                                                                             (v :: Text.Megaparsec.Stream.Stream
                                                                                     [GHC.Types.Char])
  Text.Megaparsec.$fApplicativeParsecT @ [GHC.Types.Char] @ e @ m v
  = Language.Egg.Parser.$s$fAlternativeParsecT_$s$fApplicativeParsecT
      @ e
      @ m
"SPEC/Language.Egg.Parser $fEqErrorFancy @ SourcePos" [orphan] forall (v :: GHC.Classes.Eq
                                                                              Text.Megaparsec.Pos.SourcePos)
  Text.Megaparsec.Error.$fEqErrorFancy @ Text.Megaparsec.Pos.SourcePos
                                       v
  = Language.Egg.Parser.$s$fEqErrorFancy
"SPEC/Language.Egg.Parser $fEqErrorFancy_$c/= @ SourcePos" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                      Text.Megaparsec.Pos.SourcePos)
  Text.Megaparsec.Error.$fEqErrorFancy_$c/= @ Text.Megaparsec.Pos.SourcePos
                                            $dEq
  = Language.Egg.Parser.$s$fEqErrorFancy_$c/=
"SPEC/Language.Egg.Parser $fEqErrorItem @ (Token [Char])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                  (Text.Megaparsec.Stream.Token
                                                                                     [GHC.Types.Char]))
  Text.Megaparsec.Error.$fEqErrorItem @ (Text.Megaparsec.Stream.Token
                                           [GHC.Types.Char])
                                      v
  = Language.Egg.Parser.$s$fEqErrorItem
"SPEC/Language.Egg.Parser $fEqErrorItem_$c/= @ (Token [Char])" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                          (Text.Megaparsec.Stream.Token
                                                                                             [GHC.Types.Char]))
  Text.Megaparsec.Error.$fEqErrorItem_$c/= @ (Text.Megaparsec.Stream.Token
                                                [GHC.Types.Char])
                                           $dEq
  = Language.Egg.Parser.$s$fEqErrorItem_$c/=
"SPEC/Language.Egg.Parser $fMonadParsecT @ [Char] _ _" [orphan] forall @ e
                                                                       @ m :: * -> *
                                                                       (v :: Text.Megaparsec.Stream.Stream
                                                                               [GHC.Types.Char])
  Text.Megaparsec.$fMonadParsecT @ [GHC.Types.Char] @ e @ m v
  = Language.Egg.Parser.$s$fMonadParsecT @ e @ m
"SPEC/Language.Egg.Parser $fMonadParsecT_$c>> @ [Char] _ _" [orphan] forall @ e
                                                                            @ m :: * -> *
                                                                            ($dStream :: Text.Megaparsec.Stream.Stream
                                                                                           [GHC.Types.Char])
  Text.Megaparsec.$fMonadParsecT_$c>> @ [GHC.Types.Char]
                                      @ e
                                      @ m
                                      $dStream
  = Language.Egg.Parser.$s$fMonadParsecT_$s$fMonadParsecT_$c>>
      @ e
      @ m
"SPEC/Language.Egg.Parser $fMonadParsecesParsecT @ SourcePos @ [Char] _" [orphan] forall @ m :: *
                                                                                                -> *
                                                                                         (v1 :: Text.Megaparsec.Stream.Stream
                                                                                                  [GHC.Types.Char])
                                                                                         (v :: GHC.Classes.Ord
                                                                                                 Text.Megaparsec.Pos.SourcePos)
  Text.Megaparsec.$fMonadParsecesParsecT @ Text.Megaparsec.Pos.SourcePos
                                         @ [GHC.Types.Char]
                                         @ m
                                         v
                                         v1
  = Language.Egg.Parser.$s$fMonadParsecesParsecT @ m
"SPEC/Language.Egg.Parser $fMonadPlusParsecT @ SourcePos @ [Char] _" [orphan] forall @ m :: *
                                                                                            -> *
                                                                                     (v1 :: Text.Megaparsec.Stream.Stream
                                                                                              [GHC.Types.Char])
                                                                                     (v :: GHC.Classes.Ord
                                                                                             Text.Megaparsec.Pos.SourcePos)
  Text.Megaparsec.$fMonadPlusParsecT @ Text.Megaparsec.Pos.SourcePos
                                     @ [GHC.Types.Char]
                                     @ m
                                     v
                                     v1
  = Language.Egg.Parser.$s$fMonadParsecesParsecT_$s$fMonadPlusParsecT
      @ m
"SPEC/Language.Egg.Parser $fOrdErrorFancy @ SourcePos" [orphan] forall (v :: GHC.Classes.Ord
                                                                               Text.Megaparsec.Pos.SourcePos)
  Text.Megaparsec.Error.$fOrdErrorFancy @ Text.Megaparsec.Pos.SourcePos
                                        v
  = Language.Egg.Parser.$s$fOrdErrorFancy
"SPEC/Language.Egg.Parser $fOrdErrorItem @ (Token [Char])" [orphan] forall (v :: GHC.Classes.Ord
                                                                                   (Text.Megaparsec.Stream.Token
                                                                                      [GHC.Types.Char]))
  Text.Megaparsec.Error.$fOrdErrorItem @ (Text.Megaparsec.Stream.Token
                                            [GHC.Types.Char])
                                       v
  = Language.Egg.Parser.$s$fOrdErrorItem
"SPEC/Language.Egg.Parser pAp @ [Char] _ _ _ _" [orphan] forall @ e
                                                                @ m :: * -> *
                                                                @ a
                                                                @ b
                                                                ($dStream :: Text.Megaparsec.Stream.Stream
                                                                               [GHC.Types.Char])
  Text.Megaparsec.pAp @ [GHC.Types.Char] @ e @ m @ a @ b $dStream
  = Language.Egg.Parser.$s$fAlternativeParsecT_$spAp @ e @ m @ a @ b
"SPEC/Language.Egg.Parser pBind @ [Char] _ _ _ _" [orphan] forall @ e
                                                                  @ m :: * -> *
                                                                  @ a
                                                                  @ b
                                                                  ($dStream :: Text.Megaparsec.Stream.Stream
                                                                                 [GHC.Types.Char])
  Text.Megaparsec.pBind @ [GHC.Types.Char] @ e @ m @ a @ b $dStream
  = Language.Egg.Parser.$s$fMonadParsecT_$spBind @ e @ m @ a @ b
"SPEC/Language.Egg.Parser pNotFollowedBy @ [Char] _ _ _" [orphan] forall @ e
                                                                         @ m :: * -> *
                                                                         @ a
                                                                         ($dStream :: Text.Megaparsec.Stream.Stream
                                                                                        [GHC.Types.Char])
  Text.Megaparsec.pNotFollowedBy @ [GHC.Types.Char]
                                 @ e
                                 @ m
                                 @ a
                                 $dStream
  = Language.Egg.Parser.$s$fMonadParsecesParsecT_$spNotFollowedBy
      @ e
      @ m
      @ a
"SPEC/Language.Egg.Parser pPlus @ SourcePos @ [Char] _ _" [orphan] forall @ m :: *
                                                                                 -> *
                                                                          @ a
                                                                          ($dStream :: Text.Megaparsec.Stream.Stream
                                                                                         [GHC.Types.Char])
                                                                          ($dOrd :: GHC.Classes.Ord
                                                                                      Text.Megaparsec.Pos.SourcePos)
  Text.Megaparsec.pPlus @ Text.Megaparsec.Pos.SourcePos
                        @ [GHC.Types.Char]
                        @ m
                        @ a
                        $dOrd
                        $dStream
  = Language.Egg.Parser.$s$fAlternativeParsecT_$spPlus @ m @ a
"SPEC/Language.Egg.Parser pTakeP _ @ [Char] _" [orphan] forall @ e
                                                               @ m :: * -> *
                                                               ($dStream :: Text.Megaparsec.Stream.Stream
                                                                              [GHC.Types.Char])
  Text.Megaparsec.pTakeP @ e @ [GHC.Types.Char] @ m $dStream
  = Language.Egg.Parser.$s$fMonadParsecesParsecT_$spTakeP @ e @ m
"SPEC/Language.Egg.Parser pTakeWhile1P _ @ [Char] _" [orphan] forall @ e
                                                                     @ m :: * -> *
                                                                     ($dStream :: Text.Megaparsec.Stream.Stream
                                                                                    [GHC.Types.Char])
  Text.Megaparsec.pTakeWhile1P @ e @ [GHC.Types.Char] @ m $dStream
  = Language.Egg.Parser.$s$fMonadParsecesParsecT_$spTakeWhile1P
      @ e
      @ m
"SPEC/Language.Egg.Parser pTakeWhileP _ @ [Char] _" [orphan] forall @ e
                                                                    @ m :: * -> *
                                                                    ($dStream :: Text.Megaparsec.Stream.Stream
                                                                                   [GHC.Types.Char])
  Text.Megaparsec.pTakeWhileP @ e @ [GHC.Types.Char] @ m $dStream
  = Language.Egg.Parser.$s$fMonadParsecesParsecT_$spTakeWhileP
      @ e
      @ m
"SPEC/Language.Egg.Parser pToken _ @ [Char] _ _" [orphan] forall @ e
                                                                 @ m :: * -> *
                                                                 @ a
                                                                 ($dStream :: Text.Megaparsec.Stream.Stream
                                                                                [GHC.Types.Char])
  Text.Megaparsec.pToken @ e @ [GHC.Types.Char] @ m @ a $dStream
  = Language.Egg.Parser.$s$fMonadParsecesParsecT_$spToken @ e @ m @ a
"SPEC/Language.Egg.Parser pTokens _ @ [Char] _" [orphan] forall @ e
                                                                @ m :: * -> *
                                                                ($dStream :: Text.Megaparsec.Stream.Stream
                                                                               [GHC.Types.Char])
  Text.Megaparsec.pTokens @ e @ [GHC.Types.Char] @ m $dStream
  = Language.Egg.Parser.$s$fMonadParsecesParsecT_$spTokens @ e @ m
"SPEC/Language.Egg.Parser union @ (ErrorFancy SourcePos)" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                      (Text.Megaparsec.Error.ErrorFancy
                                                                                         Text.Megaparsec.Pos.SourcePos))
  Data.Set.Internal.union @ (Text.Megaparsec.Error.ErrorFancy
                               Text.Megaparsec.Pos.SourcePos)
                          $dOrd
  = Language.Egg.Parser.$s$fAlternativeParsecT_$sunion
"SPEC/Language.Egg.Parser union @ (ErrorItem (Token [Char]))" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                          (Text.Megaparsec.Error.ErrorItem
                                                                                             (Text.Megaparsec.Stream.Token
                                                                                                [GHC.Types.Char])))
  Data.Set.Internal.union @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token [GHC.Types.Char]))
                          $dOrd
  = Language.Egg.Parser.$s$fAlternativeParsecT_$sunion1
"SPEC/Language.Egg.Parser withHints @ [Char] _ _ _" [orphan] forall @ e
                                                                    @ m :: * -> *
                                                                    @ b
                                                                    ($dOrd :: GHC.Classes.Ord
                                                                                (Text.Megaparsec.Stream.Token
                                                                                   [GHC.Types.Char]))
  Text.Megaparsec.withHints @ [GHC.Types.Char] @ e @ m @ b $dOrd
  = Language.Egg.Parser.$s$fAlternativeParsecT_$swithHints
      @ e
      @ m
      @ b
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

